//
// Copyright (c) 2007-2011 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   21 Aug 2006  Andy Saunders  Creation
//   27 Apr 2007  Brian Frank    Port from Java to Sedona
//   16 May 2007  Andy Saunders  completed required time processing
//   22 Apr 2009  Elizabeth McKenney   Simplified logic
//   04 Aug 2011  Clif Turman    Add comments
//

**
** TickTock component
**   Generates boolean square wave with ticksPerSec pulses per second
**
@niagaraIcon="module://icons/x16/control/util/sine.png"
class TickTock
  extends Component
{
  ** output pulses
  @readonly property float out

  ** can configure 0.1 to 10 pulses per second
  @max=10
  @unit=Units.per_second
  @config property float ticksPerSec = 1.0

  **
  ** Callback when component is first started in an app.
  **
  virtual override void start()
  {
    halfPeriod = 5sec / (long)(ticksPerSec * 10.0)
  }


  **
  ** Execute is called once every scan.
  **
  virtual override void execute()
  {
    // Assume waveform began at time==0, and determine which half of the cycle 
    // we are in now.  If first half, set out=true; if second half, set out=false.

    if (((Sys.ticks() / halfPeriod) % 2L) == 0L) {
      out := 1.0
    } else {
      out := 0.0
    }
  }


  **
  ** Behavior to execute when a property is changed externally
  ** 
  override void changed(Slot slot)
  {
    super.changed(slot)

    if (slot == TickTock.ticksPerSec) {
      if (ticksPerSec < 0.1) {
        ticksPerSec := 0.1
      }
      halfPeriod = 5sec / (long)(ticksPerSec * 10.0)
    }
  }


  private long halfPeriod   // cached value of 1/2 period, avoids calculating every cycle
}
