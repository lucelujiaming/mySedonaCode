//
// Copyright (c) 2007 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   08 Mar 07  Brian Frank  Creation
//

**
** StmtTest
**
class StmtTest
  extends Test
{

//////////////////////////////////////////////////////////////////////////
// Vars
//////////////////////////////////////////////////////////////////////////

  static void testVars()
  {
    // params/locals:  this test uses the full range of
    // LoadParam, StoreParam, LoadLocal, and StoreLocal
    assert(vars(0xa302602, 0x40b280, 0x9901, 0xe60, 0x23832,
                0xad02, 0xa0420e, 0x2073a, 0x73f01, 0x1234) == 0x491a_01cc)
  }

  static int vars(int a, int b, int c, int d, int e, int f, int g, int h, int i, int j)
  {
    int tempa = a;
    int tempb = b;
    int tempc = c;
    int tempd = d;
    int tempe = e;
    int tempf = f;
    int tempg = g;
    int temph = h;
    int tempi = i;
    int tempj = j;

    a = tempj;
    b = tempi;
    c = temph;
    d = tempg;
    e = tempf;
    f = tempe;
    g = tempd;
    h = tempc;
    i = tempb;
    j = tempa;

    return (a << 10) ^ (b << 9) ^ (c << 8) ^ (d << 7) ^ (e << 6) ^
            (f << 5) ^ (g << 4) ^ (h << 3) ^ (i << 2) ^ (j << 1);
  }

//////////////////////////////////////////////////////////////////////////
// If
//////////////////////////////////////////////////////////////////////////

  static void testIf()
  {
    assert(verifyIf1(true)  == 1)
    assert(verifyIf1(false) == 2)
    assert(verifyIf2(true)  == 3)
    assert(verifyIf2(false) == 4)
    assert(verifyIf3(true)  == 5)
    assert(verifyIf3(false) == 6)
    assert(verifyIf4(true)  == 7)
    assert(verifyIf4(false) == 8)

    assert(verifyIf5(0)      == 10)
    assert(verifyIf5(10)     == 920)
    assert(verifyIf5(21)     == 210)
    assert(verifyIf5(22)     == 920)
    assert(verifyIf5(23)     == 920)
    assert(verifyIf5(35)     == 40)
    assert(verifyIf5(99)     == 9)
    assert(verifyIf5(101)    == 100)
    assert(verifyIf5(1001)   == 100)
    assert(verifyIf5(1001)   == 100)
    assert(verifyIf5(10_000) == 10_000)
    assert(verifyIf5(10_001) == 100)
  }

  static int verifyIf1(bool a)
  {
    if (a)
      return 1
    return 2
  }

  static int verifyIf2(bool a)
  {
    if (a)
      return 3
    else
      return 4
  }

  static int verifyIf3(bool a)
  {
    int x
    if (a)
      x = 5
    else
      x = 6
    return x
  }

  static int verifyIf4(bool a)
  {
    int x
    if (a)
      x = 7
    else
      x = 8
    return x
  }

  static int verifyIf5(int a)
  {
    int x = 9
    if (a < 10)
    {

      x = 10
    }
    else if (a < 30)
    {
      if (a == 21) return 210
      else if (a == 22) x = 220
      else x = 20
      x = 920
    }
    else if (a < 40)
    {
      return 40
    }
    else
    {
      if (a > 100)
      {
        if (a > 1000)
          if (a >= 10_000)
          {
            x = a
            if (a == 10_000) return a
          }
        x = 100
      }
    }
    return x
  }

//////////////////////////////////////////////////////////////////////////
// While
//////////////////////////////////////////////////////////////////////////

  static void testWhile()
  {
    assert(verifyWhile1(0) == 0x01)
    assert(verifyWhile1(1) == 0x02)
    assert(verifyWhile1(7) == 0x80)

    assert(verifyWhile2(0) == 0)
    assert(verifyWhile2(1) == 1)
    assert(verifyWhile2(2) == 2)
    assert(verifyWhile2(4) == 4)
    assert(verifyWhile2(5) == 0)
    assert(verifyWhile2(6) == 1)
    assert(verifyWhile2(7) == 2)
    assert(verifyWhile2(9) == 100)

    assert(verifyWhile3(1, 0) == 100)
    assert(verifyWhile3(1, 2) == 102)
    assert(verifyWhile3(2, 3) == 206)
    assert(verifyWhile3(2, 4) == 206)
    assert(verifyWhile3(2, 5) == 206)
    assert(verifyWhile3(2, 6) == 200)
    assert(verifyWhile3(3, 7) == 300)
    assert(verifyWhile3(3, 1) == 303)
    assert(verifyWhile3(4, 1) == 403)
    assert(verifyWhile3(5, 1) == 503)
  }

  static int verifyWhile1(int x)
  {
    // simple while
    int r = 1
    int i = 0
    while (i<x)
    {
      r = r << 1;
      ++i
    }
    return r
  }

  static int verifyWhile2(int x)
  {
    // while with break/continue
    int i = 0
    int r = 0
    while (i < x)
    {
      if (i == 8) { r = 100; break }
      if (i == 4) { r = 0; i++; continue }
      i++
      r++
    }
    return r
  }

  static int verifyWhile3(int ix, int jx)
  {
    // nested whiles/break/continue
    int i = 0
    int r = 0
    while (i++ < ix)
    {
      int j = 0
      r = r + 100
      if (r >= 500) break
      if (r >= 400) continue
      int start = r
      while (j++ < jx)
      {
        if (j > 5) { r = start; break }
        if (j > 3) continue
        r = r + 1
      }
    }
    return r
  }

//////////////////////////////////////////////////////////////////////////
// DoWhile
//////////////////////////////////////////////////////////////////////////

  static void testDoWhile()
  {
    assert(verifyDoWhile1(0) == 0x02)
    assert(verifyDoWhile1(1) == 0x02)
    assert(verifyDoWhile1(2) == 0x04)
    assert(verifyDoWhile1(3) == 0x08)
    
    assert(verifyDoWhile2(0, 9, 9) == 1)
    assert(verifyDoWhile2(1, 9, 9) == 2)
    assert(verifyDoWhile2(5, 9, 9) == 16)
    assert(verifyDoWhile2(5, 4, 9) == 6)
    assert(verifyDoWhile2(5, 9, 3) == 11)
    assert(verifyDoWhile2(5, 2, 4) == 6)
  }
  
  static int verifyDoWhile1(int x)
  {                     
    int r = 1;
    do
      r <<= 1
    while (--x > 0)
    return r
  }

  static int verifyDoWhile2(int x, int b, int c)
  {         
    int r = 1
    do 
    {                                          
      if (x == c) { --x; continue }
      if (x == b) break
      r += x
    }
    while (--x > 0)
    return r                        
  }

//////////////////////////////////////////////////////////////////////////
// For
//////////////////////////////////////////////////////////////////////////

  static void testFor()
  {
    assert(verifyFor1(0) == 0x01)
    assert(verifyFor1(1) == 0x02)
    assert(verifyFor1(7) == 0x80)

    assert(verifyFor2(2) == 0x04)
    assert(verifyFor2(4) == 0x10)

    assert(verifyFor3(1, 1) == 201)
    assert(verifyFor3(2, 2) == 404)
    assert(verifyFor3(2, 3) == 404)
    assert(verifyFor3(1, 4) == 211)

    assert(verifyFor4(1) == 11)
    assert(verifyFor4(3) == 33)
  }

  static int verifyFor1(int x)
  {
    int r = 1
    int i = 7
    for (i=0; i<x; ++i) r = r << 1
    return r
  }

  static int verifyFor2(int x)
  {
    int r = 1
    int i = 0
    for (;;) { if (i++ >= x) break; r = r << 1 }
    return r
  }

  static int verifyFor3(int ix, int jx)
  {
    int r = 0
    for (int i = 0; i<ix; ++i)
    {
      r = r + 100
      int j
      for (j = 0; j<jx; ++j)
      {
        if (j == 3)
        {
          for (int k=0;;)
          {
            if (++k < 4)
            {
              r = r + 3
              continue
            }
            break
          }
          break
        }
        if (j == 2) continue
        r = r + 1
      }
      r = r + 100
    }
    return r
  }

  static int verifyFor4(int x)
  {
    int r = 0
    for (int i=0; i<x; ++i)
    {
      int a = r
      a = a + 1
      r = a
    }
    for (int i=0; i<x; ++i)
    {
      int a = r
      a = a + 10
      r = a
    }
    return r
  }

//////////////////////////////////////////////////////////////////////////
// Switch
//////////////////////////////////////////////////////////////////////////

  static void testSwitch()
  {
    assert(switchA(0) == 0)
    assert(switchA(1) == 999)
    assert(switchA(2) == 200)
    assert(switchA(3) == 300)
    assert(switchA(4) == 999)
    assert(switchA(-1) == 999)

    assert(switchB(0)  == 999)
    assert(switchB(10) == 100)
    assert(switchB(11) == 100)
    assert(switchB(12) == 100)
    assert(switchB(13) == 999)
    assert(switchB(20) == 200)
    assert(switchB(22) == 999)
    assert(switchB(25) == 200)
    assert(switchB(26) == 999)
    
    assert(switchC(20) == 200)
    assert(switchC(30) == 301)
    assert(switchC(39) == 1000)
    
  }

  define int two   = 2
  define int three = 3

  static int switchA(int x)
  {
    switch(x)
    {
      case 0:  return 0;
      case two:  return 200;
      case StmtTest.three:  return 300;
      default: return 999;
    }
  }

  static int switchB(int x)
  {
    int r = 999;
    switch(x)
    {
      case 20:
      case 25:
        r = 200;
        break
      case 10:
      case 11:
      case 12:
        r = 100;
        break
    }
    return r;
  }
  
  static int switchC(int x)
  {
    int r = 999;
    switch(x)
    {
      case 20:
      case 25:
        r = 200;
        break
      case 30:
        r = 300
      default:
        ++r
        break
    }
    return r;
  }

//////////////////////////////////////////////////////////////////////////
// Goto
//////////////////////////////////////////////////////////////////////////
  
  static void testGoto()
  {                              
    assert(doGoto(0) == 'a')                  
    assert(doGoto(1) == 'd')                  
    assert(doGoto(2) == 'c')                  
  }
  
  static int doGoto(int i)
  {                       
    if (i == 0)
    {
      goto alpha
      charlie: return 'c'
      delta: return 'd'
    }      
    
    if (i == 1) goto delta              
    
    beta: goto charlie              
    
    alpha: return 'a'
  }
  
}
