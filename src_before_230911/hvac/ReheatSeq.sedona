//
// Copyright (c) 2007-2011 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   18 Jan 2007  Andy Saunders  Creation
//   27 Apr 2007  Brian Frank    Port from Java to Sedona
//   22 Apr 2009  Elizabeth McKenney   Updated
//   22 Jul 2009  Adapted from LSeq class
//   04 Aug 2011  Clif Turman    Add comments
//

**
** ReheatSeq will provide a linear sequence of up to 4 loads based on configurable thresholds
**
** Sets an output true if the "in" value is greater than corresponding threshold,
** and returns the ouput to false if the "in" value is less than threshold minus the hysteresis value.  
**
** "dOn" is the count of outputs that are true (0 to 4)
**
** If "enable" is false, all outputs are set to false regardless of in value.
**
@niagaraIcon="module://icons/x16/control/util/step.png"
class ReheatSeq
  extends Component

{
  **output 1
  @readonly property bool out1

  **output 2
  @readonly property bool out2

  **output 3
  @readonly property bool out3

  **output 4
  @readonly property bool out4

  ** cv input
  property float in

  **all outputs are false if enable == false
  @config property bool enable
  
  **number of outputs currently turned on
  @readonly property byte dOn  = 0

  **hysteresis value - in < threshold - hysteresis is required to turn an output off 
  @config property float hysteresis

  ** threshold to turn out1 on
  @config property float threshold1

  ** threshold to turn out2 on
  @config property float threshold2

  ** threshold to turn out3 on
  @config property float threshold3

  ** threshold to turn out4 on
  @config property float threshold4


  **
  ** Execute is called once every scan.
  **
  virtual override void execute()
  {
    int numStagesOn = 0
    if(!enable)
    {
      out1:=false
      out2:=false
      out3:=false
      out4:=false
      dOn:=0
      return
    }

    // Loop through out1 - out4 setting desired state for each
    //  (Note assumption that output slot ids are consecutive)
    for(int i = 0; i < 4; i++)
    {
      //if an output is already on
      if(getBool(type.slots[ReheatSeq.out1.id+i]))
      {
        //check to see if it is still above (threshold - hysteresis) value
        if((in + hysteresis) >= getFloat(type.slots[ReheatSeq.threshold1.id+i]))
          numStagesOn++
        else
          setBool(type.slots[ReheatSeq.out1.id+i],false) //turn off if below threshold - hysteresis
      }
      //if an output is currently off
      else
      {
        if(in >= getFloat(type.slots[ReheatSeq.threshold1.id+i]))
        {
          setBool(type.slots[ReheatSeq.out1.id+i],true)
          numStagesOn++
        }
      }
    }

    dOn := numStagesOn
  }
  
}
