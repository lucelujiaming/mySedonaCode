//
// Copyright (c) 2011 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   16 Feb 10  Dan Giorgis  creation
//

**
** And4Test
**
class And4Test
  extends Test
{
  static inline And4 and4

 

  static void bitTest(int bits, int nullBits)
  {       
    int trueCnt = 0;
    int nullCnt = 0;
       
    if ((nullBits & 0x01) != 0)
    {   
      and4.in1 := null; 
      nullCnt++;
    }
    else if ((bits & 0x01) != 0) 
    { 
      and4.in1 := true; 
      trueCnt++;
    }
    else
      and4.in1 := false;
         
    if ((nullBits & 0x02) != 0)
    {   
      and4.in2 := null; 
      nullCnt++;
    }
    else if ((bits & 0x02) != 0) 
    { 
      and4.in2 := true; 
      trueCnt++;
    }
    else
      and4.in2 := false;

    if ((nullBits & 0x04) != 0)
    {   
      and4.in3 := null; 
      nullCnt++;
    }
    else if ((bits & 0x04) != 0) 
    { 
      and4.in3 := true; 
      trueCnt++;
    }
    else
      and4.in3 := false;

    if ((nullBits & 0x08) != 0)
    {   
      and4.in4 := null; 
      nullCnt++;
    }
    else if ((bits & 0x08) != 0) 
    { 
      and4.in4 := true; 
      trueCnt++;
    }
    else
      and4.in4 := false;
    
    and4.execute()
        
//Sys.out.print("bits $bits nullBits $nullBits  nullCnt $nullCnt trueCnt $trueCnt").nl();
//Sys.out.print("in1 $and4.in1 in2 $and4.in2 in3 $and4.in3 in4 $and4.in4 out $and4.out").nl();    
    //  If all input are null output should be null
    if (nullCnt == 4)
      assert(and4.out == null)
    else
    {
      int nonNull = 4 - nullCnt;
     
      if (trueCnt == (4-nullCnt))
        assert(and4.out == true)
      else   
        assert(and4.out == false)
    }   
  }  

  static void test()
  {
    bitTest(0x0, 0xF)

    for (int inBits = 0; inBits <= 0xF; inBits++)
      for (int nullBits = 0; nullBits <= 0xF; nullBits++)
        bitTest(inBits, nullBits)    
      
  }
}
