//
// Copyright (c) 2009-2011 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   15 Jul 2009  Clif Turman    Creation
//   24 Jul 2009  Added inverted behavior
//   04 Aug 2011  Clif Turman    Add comments
//

**
** Applies hysteresis to an input value to set a boolean out.
**
** NOTE: If "Rising Edge" > "Falling Edge", then out behaves "normally", ie
**   out switches to "true" when in rises above "Rising Edge", and switches back
**   to "false" when in falls below "Falling Edge"
**                   Falling    Rising
**                    Edge       Edge
**                      |----------|-------
**                      |          |
**              --------|----------|
**
** NOTE: If "Rising Edge" < "Falling Edge", then out behaves "inverted", ie
**   out switches to "false" when in rises above "Falling Edge", and switches back
**   to "true" when in falls below "Rising Edge"
**                   Rising     Falling
**                    Edge        Edge
**              --------|----------|
**                      |          |
**                      |----------|-------
**
** NOTE: If "Rising Edge" == "Falling Edge", this object become a simple
**  comparator, where if in > Rising Edge, then out = true
**




@niagaraIcon="module://icons/x16/control/util/hysteresis.png"
class Hysteresis
  extends Component
{
  ** input value to which hysteresis is to be applied 
  property float in

  ** boolean output
  @readonly property bool out = false

  ** threshold for rising edge
  @defaultOnClone
  @config property float risingEdge = 50.0

  ** threshold for falling edge
  @defaultOnClone
  @config property float fallingEdge = 50.0

  **
  ** Execute is called once every scan.
  **
  virtual override void execute()
  {
    if(risingEdge < fallingEdge)
    {
      //this is the "inverted case"
      if(in <= risingEdge)
        out := true
      else if (in >= fallingEdge)
        out := false
    }
    else
    {
      //this is the "normal" case
      if(in >= risingEdge)
        out := true
      else if (in <= fallingEdge)
        out := false
    }	
  }
}
