//
// Copyright (c) 2007 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   06 Sep 06  Brian Frank  Creation
//   07 Jun 07  Brian Frank  Port from Java to Sedona
//   01 Apr 08  Brian Frank  Rework to use DASP
//

**
** SoxCommands processes all the sox command request/response.
**
class SoxCommands
{

////////////////////////////////////////////////////////////////
// Messaging
////////////////////////////////////////////////////////////////

  **
  ** Process the current message just received
  **
  static void process(SoxService service, SoxSession session)
  {
    // read sox request header
    BufInStream in = service.in
    int cmd        = in.read()
    int replyNum   = in.read()
    SoxService.log.trace("$cmd $replyNum ${service.packet.size}bytes")

    ** log.message("process = (cmd=$cmd, replyNum=$replyNum) with ${service.packet.size}bytes")

    // receving a chunk doesn't necessarily need a response packet
    if (cmd == 'k')
    {
      fileReceiveChunk(service, session)
      return
    }

    // allocate response packet
    SendPacket res = session.sendWindow.nextPacket()
    res.replyNum = replyNum

    // log.message("process cmd=$cmd")
    // route
    switch (cmd)
    {
      // used:  a b c d f i k l n o q r s u v w x y z
      // avail: e g h j m p t
      case 'r': readPropReq(service, session, res);      break
      case 'c': readCompReq(service, session, res);      break
      case 'i': invokeReq(service, session, res);        break
      case 'w': writeReq(service, session, res);         break
      case 's': subscribeReq(service, session, res);     break
      case 'u': unsubscribeReq(service, session, res);   break
      case 'a': addReq(service, session, res);           break
      case 'd': deleteReq(service, session, res);        break
      case 'n': renameReq(service, session, res);        break
      case 'o': reorderReq(service, session, res);       break
      case 'l': linkReq(service, session, res);          break
      case 'q': queryReq(service, session, res);         break
      case 'v': res.cmd = 'V';                           break
      case 'y': res.cmd = 'Y';                           break
      case 'f': fileOpenReq(service, session, res);      break
      case 'z': fileCloseReq(service, session, res);     break
      case 'b': fileRenameReq(service, session, res);    break
      case 'x': extCommandReq(service, session, res);    break
      default:
        SoxService.log.warning("Unknown cmd $cmd")
        res.error("bad cmd")
    }

    // send response immediately
    send(service, session, res)
  }

  static void send(SoxService service, SoxSession session, SendPacket res)
  {
    switch (res.cmd)
    {
      case 'R': readPropRes(service, session, res);    break
      case 'C': readCompRes(service, session, res);    break
      case 'S': subscribeRes(service, session, res);   break
      case 'A': addRes(service, session, res);         break
      case 'V': versionRes(service, session, res);     break
      case 'Y': versionMoreRes(service, session, res); break
      case 'Q': queryRes(service, session, res);       break
      case 'F': fileOpenRes(service, session, res);    break
      case 'Z': fileCloseRes(service, session, res);   break
      case 'X': extCommandRes(service, session, res);   break

      // these responses don't carry payload
      case 'B':
      case 'D':
      case 'I':
      case 'L':
      case 'N':
      case 'O':
      case 'W':
      case 'U':
        prepareRes(service, session, res);
        break

      // break these out into default to keep tight switch range
      default:
        //if (res.cmd == '!') errorRes(service, session, res)
        if (res.cmd == 'e') eventRes(service, session, res)
        else if (res.cmd == 'k') fileSendChunk(service, session, res)
        else if (res.cmd == 'z') prepareRes(service, session, res)
        else if (res.cmd != '!')
        {
          SoxService.log.error("Unknown response $res.cmd")
          return
        }
    }
    if (res.cmd == '!')
    	errorRes(service, session, res)
    service.send(session)
  }


////////////////////////////////////////////////////////////////
// Version
////////////////////////////////////////////////////////////////

  **
  ** versionReq
  ** {
  **   u1  'v'
  **   u1  replyNum
  ** }
  **
  /*
  static void versionReq(SoxService service, SoxSession session, SendPacket res)
  {
    res.cmd = 'V'
  }
  */

  **
  ** versionRes
  ** {
  **   u1   'V'
  **   u1   replyNum
  **   u1   kitCount
  **   kits[kitCount]
  **   {
  **     str name
  **     i4  checksum
  **   }
  ** }
  **
  static void versionRes(SoxService service, SoxSession session, SendPacket res)
  {
    OutStream out = prepareRes(service, session, res)
    out.write(Sys.kitsLen)
    foreach (Kit kit : Sys.kits, Sys.kitsLen)
    {
      out.writeStr(kit.name)
      out.writeI4(kit.checksum)
    }
  }

////////////////////////////////////////////////////////////////
// Version More
////////////////////////////////////////////////////////////////

  **
  ** req
  ** {
  **   u1  'y'
  **   u1  replyNum
  ** }
  **
  /*
  static void versionMoreReq(SoxService service, SoxSession session, SendPacket res)
  {
    res.cmd = 'Y'
  }
  */

  **
  ** res
  ** {
  **   u1   'Y'
  **   u1   replyNum
  **   str  platformId
  **   u1   scodeFlags
  **   kitVersions[kitCount]
  **   {
  **     str version
  **   }
  **   u1   pairs
  **   pairs
  **   {
  **     str  key
  **     str  val
  **   }
  ** }
  **
  static void versionMoreRes(SoxService service, SoxSession session, SendPacket res)
  {
    OutStream out = prepareRes(service, session, res)
    out.writeStr(Sys.app.platform.platformId.toStr())
    out.write(Sys.scodeAddr()[23]) // scode flags fixed at 23 byte offset
    foreach (Kit kit : Sys.kits, Sys.kitsLen)
      out.writeStr(kit.version)
    out.write(1)
    out.writeStr("soxVer"); out.writeStr("1.1");
  }

////////////////////////////////////////////////////////////////
// Read Prop
////////////////////////////////////////////////////////////////

  **
  ** req
  ** {
  **   u1  'r'
  **   u1  replyNum
  **   u2  compId
  **   u1  propId
  ** }
  **
  static void readPropReq(SoxService service, SoxSession session, SendPacket res)
  {
    BufInStream in = service.in
    res.cmd = 'R'
    res.u2Data1 = in.readU2()  // compId
    res.u2Data2 = in.read()    // propId
  }

  **
  ** res
  ** {
  **   u1   'R'
  **   u1   replyNum
  **   u1   any code
  **   var  propValue
  ** }
  **
  static void readPropRes(SoxService service, SoxSession session, SendPacket res)
  {
    // lookup component
    Component comp = Sys.app.lookup(res.u2Data1)
    if (comp == null) { res.error("bad compId"); return }

    // lookup slot
    Slot prop = comp.type.slot(res.u2Data2)
    if (prop == null || !prop.isProp()) { res.error("bad slotId"); return }

    // permission check
    int perm = prop.isOperator() ? User.or : User.ar
    if (!session.user.has(comp, perm)) { res.error("denied"); return }

    // prepare res
    OutStream out = prepareRes(service, session, res)
    out.writeI2(comp.id)
    out.write(prop.id)
    out.write(prop.type.id)
    comp.saveProp(out, prop)
  }

////////////////////////////////////////////////////////////////
// Read Comp: tree structure, config props, runtime props, or links.
////////////////////////////////////////////////////////////////

  **
  ** req
  ** {
  **   u1   'c'
  **   u1   replyNum
  **   u2   componentId
  **   u1   what: 't', 'c', 'r', 'l' (tree, config, runtime, links)
  ** }
  **
  static void readCompReq(SoxService service, SoxSession session, SendPacket res)
  {
    // parse req
    BufInStream in = service.in
    res.cmd = 'C'
    res.u2Data1 = in.readU2() // compId
    res.u2Data2 = in.read()   // what
  }

  **
  ** res
  ** {
  **   u1    'C'
  **   u1    replyNum
  **   u2    componentId
  **   compTree | compProps | compLinks
  ** }
  **
  static void readCompRes(SoxService service, SoxSession session, SendPacket res)
  {
    // lookup component
    Component c = Sys.app.lookup(res.u2Data1)
    if (c == null) { res.error("bad compId"); return }
    if (!session.user.has(c, User.or)) { res.error("denied"); return }

    // write res
    OutStream out = prepareRes(service, session, res)
    out.writeI2(c.id)
    writeComp(service, session, c, res.u2Data2)
  }

////////////////////////////////////////////////////////////////
// Subscribe
////////////////////////////////////////////////////////////////

  **
  ** req
  ** {
  **   u1   's'
  **   u1   replyNum
  **   u1   whatMask: tree=0x01 config=0x02 rt=0x04 links=0x8 0xff all tree
  **   u1   size
  **   u2[] compIds
  ** }
  **
  static void subscribeReq(SoxService service, SoxSession session, SendPacket res)
  {
    res.cmd = 'S'

    // parse req
    BufInStream in = service.in
    int whatMask = in.read()
    int num = in.read()

    // handle all tree events
    if (num == 0 &&  whatMask == 0xff) { session.allTreeEvents = true; return }

    // subscribe
    whatMask &= 0x0f
    int numSubscribed = 0
    for (int i=0; i<num; ++i)
    {
      Component c = Sys.app.lookup(in.readU2())
      if (c == null || !session.user.has(c, User.or)) continue

      // turn on subscription and event bits
      c.watchFlags[session.index] |= (whatMask << 4)
      c.watchFlags[session.index] |= whatMask
      numSubscribed++
    }
    res.u2Data1 = numSubscribed
  }

  **
  ** res
  ** {
  **   u1     'S'
  **   u1     replyNum
  **   u1     numSubscribed
  ** }
  **
  static void subscribeRes(SoxService service, SoxSession session, SendPacket res)
  {
    OutStream out = prepareRes(service, session, res)
    out.write(res.u2Data1)
  }

////////////////////////////////////////////////////////////////
// Unsubscribe
////////////////////////////////////////////////////////////////

  **
  ** req
  ** {
  **   u1   'u'
  **   u1   replyNum
  **   u2   componentId
  **   u1   whatMask: tree=0x1 config=0x2 rt=0x4 links=0x8 0xff all tree
  ** }
  **
  static void unsubscribeReq(SoxService service, SoxSession session, SendPacket res)
  {
    res.cmd = 'U'

    // parse req
    BufInStream in = service.in
    int whatMask = in.read()
    int num = in.read()

    // handle all tree
    if (num == 0 &&  whatMask == 0xff) { session.allTreeEvents = false; return }

    // unsubscribe - silently ignore errors
    whatMask &= 0x0f;
    for (int i=0; i<num; ++i)
    {
      Component c = Sys.app.lookup(in.readU2())
      if (c == null || !session.user.has(c, User.or)) continue

      // clear subscription bits (we define the sox protocol
      // mask to match the top nibble of the watch mask)
      c.watchFlags[session.index] &= ~(whatMask << 4)
    }
  }

  **
  ** res
  ** {
  **   u1  'U'
  **   u1  replyNum
  ** }
  **
  /*
  static void unsubscribeRes(SoxService service, SoxSession session, SendPacket res)
  {
    prepareRes(service, session, res)
  }
  */

////////////////////////////////////////////////////////////////
// Invoke
////////////////////////////////////////////////////////////////

  **
  ** req
  ** {
  **   u1   'i'
  **   u1   replyNum
  **   u2   componentId
  **   u1   slotId
  **   val  argument
  ** }
  **
  static void invokeReq(SoxService service, SoxSession session, SendPacket res)
  {
    res.cmd = 'I'

    // parse
    BufInStream in = service.in
    int compId = in.readU2()
    int slotId = in.read()

    // lookup component
    Component comp = Sys.app.lookup(compId)
    if (comp == null) { res.error("bad compId"); return }

    // lookup slot
    Slot slot = comp.type.slot(slotId)
    if (slot == null || !slot.isAction()) { res.error("bad slotId"); return }

    // permission check
    int perm = slot.isOperator() ? User.oi : User.ai
    if (!session.user.has(comp, perm)) { res.error("denied"); return }

    // if a Buf action, then we reuse the packet
    // buffer as the argument and shift memory down
    if (slot.type.id == Type.bufId)
    {
      int size = in.readU2()
      Buf buf = service.packet
      Sys.copy(buf.bytes, in.pos, buf.bytes, 0, size)
      buf.size = size
      comp.invokeBuf(slot, buf)
    }

    // else decode value and invoke
    else
    {
      comp.invokeAction(in, slot)
    }
  }

  **
  ** res
  ** {
  **   u1   'I'
  **   u1   replyNum
  ** }
  **
  /*
  static void invokeRes(SoxService service, SoxSession session, SendPacket res)
  {
    prepareRes(service, session, res)
  }
  */

////////////////////////////////////////////////////////////////
// Write
////////////////////////////////////////////////////////////////

  **
  ** req
  ** {
  **   u1   'w'
  **   u1   replyNum
  **   u2   componentId
  **   u1   slotId
  **   val  value
  ** }
  **
  static void writeReq(SoxService service, SoxSession session, SendPacket res)
  {
    res.cmd = 'W'

    // parse req
    BufInStream in = service.in
    int compId = in.readU2()
    int slotId = in.read()

    // lookup component
    Component comp = Sys.app.lookup(compId)
    if (comp == null) { res.error("bad compId"); return }

    // lookup slot
    Slot slot = comp.type.slot(slotId)
    if (slot == null || !slot.isProp()) { res.error("bad slotId"); return }

    // permission check
    int perm = slot.isOperator() ? User.ow : User.aw
    if (!session.user.has(comp, perm)) { res.error("denied"); return }

    // decode value and invoke
    comp.loadProp(in, slot)
  }

  **
  ** res
  ** {
  **   u1   'W'
  **   u1   replyNum
  ** }
  **
  /*
  static void writeRes(SoxService service, SoxSession session, SendPacket res)
  {
    prepareRes(service, session, res)
  }
  */

////////////////////////////////////////////////////////////////
// Add
////////////////////////////////////////////////////////////////

  **
  ** req
  ** {
  **   u1    'a'
  **   u1    replyNum
  **   u2    parentId
  **   u1    kitId
  **   u1    typeId
  **   str   name
  **   val[] configProps
  ** }
  **
  static void addReq(SoxService service, SoxSession session, SendPacket res)
  {
    // parse req
    BufInStream in = service.in
    int parentId = in.readU2()
    int kitId    = in.read()
    int typeId   = in.read()
    Str name     = in.readStrInPlace(tempStr1)

    // lookup parent component
    Component parent = Sys.app.lookup(parentId)
    if (parent == null) { res.error("bad compId"); return }

    // permission check
    if (!session.user.has(parent, User.aw)) { res.error("denied"); return }

    // lookup type
    Kit kit = Sys.kit(kitId)
    Type compType = null
    if (kit != null)
    {
      compType = kit.type(typeId)
      if (compType == null || compType.isPrimitive()) { res.error("bad type"); return }
    }

    // add comp to application
    Component comp = Sys.app.add(parent, name, compType)
    if (comp== null) { res.error("app.add"); return }

    // decode props
    comp.loadProps(in, 'c')

    // save response info
    res.cmd = 'A'
    res.u2Data1 = comp.id
  }

  **
  ** res
  ** {
  **   u1    'A'
  **   u1    replyNum
  **   u2    compId
  ** }
  **
  static void addRes(SoxService service, SoxSession session, SendPacket res)
  {
    OutStream out = prepareRes(service, session, res)
    out.writeI2(res.u2Data1)
  }

////////////////////////////////////////////////////////////////
// Rename
////////////////////////////////////////////////////////////////

  **
  ** req
  ** {
  **   u1    'n'
  **   u1    replyNum
  **   u2    compId
  **   str   newName
  ** }
  **
  static void renameReq(SoxService service, SoxSession session, SendPacket res)
  {
    // parse req
    BufInStream in = service.in
    int compId = in.readU2()
    Str name   = in.readStrInPlace(tempStr1)

    // lookup component
    Component comp = Sys.app.lookup(compId)
    if (comp == null) { res.error("bad compId"); return }

    // permission check
    if (!session.user.has(comp, User.aw)) { res.error("denied"); return }

    // rename
    comp.name.copyFromStr(name, Component.nameLen)
    comp.fireTreeChanged()

    res.cmd = 'N'
  }

  **
  ** res
  ** {
  **   u1    'N'
  **   u1    replyNum
  ** }
  **
  /*
  static void renameRes(SoxService service, SoxSession session, SendPacket res)
  {
    prepareRes(service, session, res)
  }
  */

////////////////////////////////////////////////////////////////
// Reorder
////////////////////////////////////////////////////////////////

  **
  ** req
  ** {
  **   u1    'o'
  **   u1    replyNum
  **   u2    compId
  **   u1    numChildren
  **   u2[]  childrenIds
  ** }
  **
  static void reorderReq(SoxService service, SoxSession session, SendPacket res)
  {
    // parse req
    BufInStream in = service.in
    int compId = in.readU2()
    int num    = in.read()

    // lookup component
    Component parent = Sys.app.lookup(compId)
    if (parent == null) { res.error("bad compId"); return }

    // permission check
    if (!session.user.has(parent, User.aw)) { res.error("denied"); return }

    // verify the children first
    int pos = in.pos
    for (int i=0; i<num; ++i)
    {
      Component x = Sys.app.lookup(in.readU2())
      if (x == null || x.parent != parent.id)
      {
        res.error("bad childId");
        return
      }
    }

    // we've verified, now reorder the children linked list
    in.pos = pos
    Component last = null
    for (int i=0; i<num; ++i)
    {
      Component x = Sys.app.lookup(in.readU2())
      if (last == null)
        parent.children = x.id
      else
        last.nextSibling = x.id
      last = x
    }
    if (last != null) last.nextSibling = Component.nullId

    parent.childEvent(Component.REORDERED, null)
    parent.fireTreeChanged()

    res.cmd = 'O'
  }

  **
  ** res
  ** {
  **   u1   'O'
  **   u1   replyNum
  ** }
  **
  /*
  static void reorderRes(SoxService service, SoxSession session, SendPacket res)
  {
    prepareRes(service, session, res)
  }
  */

////////////////////////////////////////////////////////////////
// Delete
////////////////////////////////////////////////////////////////

  **
  ** req
  ** {
  **   u1    'd'
  **   u1    replyNum
  **   u2    compId
  ** }
  **
  static void deleteReq(SoxService service, SoxSession session, SendPacket res)
  {
    // parse req
    BufInStream in = service.in
    int compId = in.readU2()

    // lookup component
    Component comp = Sys.app.lookup(compId)
    if (comp == null) { res.error("bad compId"); return }

    // permission check
    if (!session.user.has(comp, User.aw)) { res.error("denied"); return }

    // nuke it from app
    if (!Sys.app.remove(comp)) { res.error("app.remove"); return }

    res.cmd = 'D'
  }

  **
  ** res
  ** {
  **   u1    'D'
  **   u1    replyNum
  ** }
  **
  /*
  static void deleteRes(SoxService service, SoxSession session, SendPacket res)
  {
    prepareRes(service, session, res)
  }
  */

////////////////////////////////////////////////////////////////
// Link/Unlink
////////////////////////////////////////////////////////////////

  **
  ** req
  ** {
  **   u1   'l'
  **   u1   replyNum
  **   u1   'a' | 'd' (add/delete)
  **   u2   fromCompId
  **   u1   fromSlotId
  **   u2   toCompId
  **   u1   toSlotId
  ** }
  **
  static void linkReq(SoxService service, SoxSession session, SendPacket res)
  {
    // parse req
    BufInStream in = service.in
    int command    = in.read()
    int fromCompId = in.readU2()
    int fromSlotId = in.read()
    int toCompId   = in.readU2()
    int toSlotId   = in.read()
    App app = Sys.app
    User user = session.user

    // lookup to component and verify admin-write
    // permission (for both add and delete)
    Component toComp = app.lookup(toCompId)
    if (toComp == null) { res.error("bad compId"); return }
    if (!user.has(toComp, User.aw)) { res.error("denied"); return }

    // add
    bool success = false
    if (command == 'a')
    {
      Component fromComp = app.lookup(fromCompId)
      if (fromComp != null)
      {
        // check adminRead on from component
        if (!user.has(fromComp, User.ar)) { res.error("denied"); return }

        Slot fromSlot = fromComp.type.slot(fromSlotId)
        Slot toSlot   = toComp.type.slot(toSlotId)
        success = app.addLink(fromComp, fromSlot, toComp, toSlot) != null // handles null slots

        if (!success) { res.error("could not add link"); return }
      }
    }

    // delete
    else if (command == 'd')
    {
      Link link = app.lookupLink(fromCompId, fromSlotId, toCompId, toSlotId)
      if (link != null)
        success = app.removeLink(link)
      else { res.error("could not find link"); return }

      if (!success) { res.error("could not delete link"); return }
    }

    res.cmd = 'L'
  }

  **
  ** res
  ** {
  **   u1   'L'
  **   u1   replyNum
  ** }
  **
  /*
  static void linkRes(SoxService service, SoxSession session, SendPacket res)
  {
    prepareRes(service, session, res)
  }
  */

//////////////////////////////////////////////////////////////////////////
// Component Write
//////////////////////////////////////////////////////////////////////////

  **
  ** Write a component
  **  - 't': writeCompTree
  **  - 'c': writeCompProps
  **  - 'r': writeCompProps
  **  - 'l': writeCompLinks
  **
  static bool writeComp(SoxService service, SoxSession session, Component c, int what)
  {
    if (what == 't') return writeCompTree(service, session, c)
    if (what == 'c') return writeCompProps(service, session, c, 'c')
    if (what == 'r') return writeCompProps(service, session, c, 'r')
    if (what == 'l') return writeCompLinks(service, session, c)
    return false
  }

  **
  ** Write component tree information
  **
  **   compTree
  **   {
  **     u1    't'
  **     u1    kitId
  **     u1    typeId
  **     str   name
  **     u2    parent
  **     u1    permissions
  **     u1    numKids
  **     u2[numKids] kidIds
  **   }
  **
  static bool writeCompTree(SoxService service, SoxSession session, Component c)
  {
    OutStream out = service.out
    out.write('t')
    out.write(c.type.kit.id)
    out.write(c.type.id)
    out.writeStr(c.name)
    out.writeI2(c.parent)
    out.write(session.user.permFor(c))

    int backpatch = service.packet.size
    out.write(0xff) // spacer for numKids
    int numKids = 0
    Component x = Sys.app.lookup(c.children)
    User user = session.user
    while (x != null)
    {
      if (user.has(x, User.or))
      {
        numKids++
        out.writeI2(x.id)
      }
      x = Sys.app.lookup(x.nextSibling)
    }
    service.packet.bytes[backpatch] = numKids
    return true
  }

  **
  ** Write component props (config or runtime)
  **
  **   compProps
  **   {
  **     u1     'c' or 'r' for config or runtime, 'C'/'R' if operator only
  **     val[]  propValues
  **   }
  **
  static bool writeCompProps(SoxService service, SoxSession session, Component c, int what)
  {
    // if no admin read permission, then capitalize what
    if (!session.user.has(c, User.ar)) what &= ~0x20

    OutStream out = service.out
    out.write(what)
    c.saveProps(out, what)
    return true
  }

  **
  ** Write component links
  **
  **   compLinks
  **   {
  **     u1    'l'
  **     Link[] links
  **     u2     0xffff end marker
  **   }
  **
  static bool writeCompLinks(SoxService service, SoxSession session, Component c)
  {
    OutStream out = service.out
    out.write('l')

    // if missing admin-read permission, don't send links
    if (!session.user.has(c, User.ar)) { out.writeI2(0xffff); return true }

    for (Link link = c.linksTo; link != null; link = link.nextTo)
      link.save(out)
    for (Link link = c.linksFrom; link != null; link = link.nextFrom)
      link.save(out)
    out.writeI2(0xffff)
    return true
  }

////////////////////////////////////////////////////////////////
// Query
////////////////////////////////////////////////////////////////

  **
  ** req
  ** {
  **   u1   'q'
  **   u1   replyNum
  **   u1   queryType
  **   u1[] queryReq
  ** }
  **
  ** queryType 's': query service
  ** req-service
  ** {
  **   u1  kitId
  **   u1  typeId
  ** }
  **
  static void queryReq(SoxService service, SoxSession session, SendPacket res)
  {
    BufInStream in = service.in

    // only support 's' query service
    int queryType =  in.read()
    if (queryType != 's') { res.error("bad query"); return }

    res.cmd = 'Q'
    res.u2Data1 = in.read()   // kitId
    res.u2Data2 = in.read()   // typeId
  }

  **
  ** res
  ** {
  **   u1   'Q'
  **   u1   replyNum
  **   u1[] queryRes
  ** }
  **
  ** queryType 's': query service
  ** res-service
  ** {
  **   u2[num]  compIds
  **   u2       0xffff end marker
  ** }
  **
  static void queryRes(SoxService service, SoxSession session, SendPacket res)
  {
    // only support 's' query service

    // lookup service type
    Kit kit = Sys.kit(res.u2Data1)
    Type serviceType = null
    if (kit != null)
    {
      serviceType = kit.type(res.u2Data2)
    }
    if (serviceType == null) { res.error("bad type"); return }

    // prepare res
    OutStream out = prepareRes(service, session, res)
    Service s = Sys.app.services
    while (s != null)
    {
      if (s.type.is(serviceType)) out.writeI2(s.id)
      s = s.nextService
    }
    out.writeI2(0xffff)
  }

////////////////////////////////////////////////////////////////
// File Open
////////////////////////////////////////////////////////////////

  **
  ** req
  ** {
  **   u1   'f'
  **   u1   replyNum
  **   str  method ("g" for get, "p" for put)
  **   str  uri
  **   u4   fileSize
  **   u2   suggestedChunkSize  (suggested by client)
  **   headers[]
  **   {
  **     str  name
  **     str  value
  **   }
  **   u1 end of headers '\0'
  ** }
  **
  ** On a put, the fileSize is the number of bytes that will be written. On a
  ** get, the fileSize is the maximum number of bytes to read. You can read the
  ** whole file on a get by specifying fileSize as 0. The actual
  ** number of bytes read might be less if there are not fileSize bytes
  ** available (taking into account the size of the actual file, and the
  ** potential offset).
  **
  **  Supported Headers:
  **   Name      Value         Method      Default   Description
  **   ----      -----         ------      -------   -----------
  **   offset    int           get, put    0         Byte offset to use when reading/writing the uri
  **   mode      "w", "m"      put         "w"       File mode to use (see sys::File)
  **
  static void fileOpenReq(SoxService service, SoxSession session, SendPacket res)
  {
    FileTransfer tx = session.transfer
    File file = tx.file

    // parse req
    BufInStream in = service.in
    Str method     = in.readStrInPlace(tempStr1)
    Str uri        = in.readStrInPlace(tempStr2)
    int fileSize   = in.readS4()
    int chunkSize  = in.readU2()

    log.message("fileOpenReq method=$method")
    log.message("fileOpenReq uri=$uri")
    log.message("fileOpenReq fileSize=$fileSize")
    log.message("fileOpenReq chunkSize=$chunkSize")
    // check permissions
    if (!session.user.canProv(uri)) { res.error("denied"); return }

    log.message("fileOpenReq method=$method")
    // open a watch as a file transaction
    if (tx.mode != FileTransfer.unused) { res.error("busy"); return }
    file.name = uri

    log.message("fileOpenReq file.name=$file.name")
    // check chunkSize - since we have a fixed size buffer
    // we have to leave room for 17 bytes of header:
    //   5 bytes dasp header
    //   3 bytes ack header field
    //   3 bytes ackMore with 1 byte
    //   1 byte sox cmd
    //   1 byte replyNum
    //   2 bytes chunkNum
    //   2 bytes chunkSize
    // Also see FileTransfer.java
    if (chunkSize + 18 >= Dasp.ABS_MAX_VAL)
      chunkSize = Dasp.ABS_MAX_VAL - 18

    // check for file too big (max chunkNum won't fit into 2 bytes)
    if (fileSize >= chunkSize * 0xffff) { res.error("too big"); return }

    // read supported headers - ignore anything we don't recognize
    Str openMode = "w" // Default for a put. Always 'r' for a get
    int offset = 0
    Str key
    Str val
    while(true)
    {
      key = in.readStrInPlace(tempKey)
      if (key == null) { res.error("invalid headers"); return }
      if (key.length() == 0) break
      if ((val = in.readStrInPlace(tempVal)) == null) { res.error("bad value"); return }

      if (key.equals("mode")) openMode = val
      else if (key.equals("offset") && ((offset = val.parseInt()) < 0)) { res.error("bad offset"); return }
    }

    // handle get or put:
    //   - define fileSize (for get)

    int txMode
    switch (method.get(0))
    {
      case 'g':
        if (!file.exists()) { res.error("not found"); return }
        openMode = "r"
        txMode   = FileTransfer.get
        // Make sure we don't read more than there is
        int maxBytes = Sys.max(0, file.size() - offset)
        if (fileSize == 0)
          fileSize = maxBytes
        else
          fileSize = Sys.min(fileSize, maxBytes)
        break
      case 'p':
        if (!(openMode.get(0) == 'w' || openMode.get(0) == 'm')) { res.error("bad mode"); return }
        txMode = FileTransfer.put
        // notify platform - Jennic uses this to auto-tune the network
        // since we expect a burst of incoming messages on put
        Sys.app.platform.notify("sox.put", "o")
        break
      default:
        res.error("bad method")
        return
    }

    // open the file
    if (!file.open(openMode)) { res.error("cannot open"); return }

    // setup the transaction
    tx.mode      = txMode
    tx.fileSize  = fileSize
    tx.offset    = offset
    tx.chunkSize = chunkSize
    tx.numChunks = tx.fileSize/chunkSize
    if (fileSize % chunkSize != 0) tx.numChunks++
    tx.nextChunk = 0

    // prepare response
    res.cmd = 'F'
  }

  **
  ** res
  ** {
  **   u1   'F'
  **   u1   replyNum
  **   u4   fileSize
  **   u2   actualChunkSize
  **   headers[]
  **   {
  **     str  name
  **     str  value
  **   }
  **   u1 end of headers '\0'
  ** }
  **
  static void fileOpenRes(SoxService service, SoxSession session, SendPacket res)
  {
    FileTransfer tx = session.transfer
    OutStream out = prepareRes(service, session, res)
    out.writeI4(tx.fileSize)
    out.writeI2(tx.chunkSize)
    out.write(0)
  }

////////////////////////////////////////////////////////////////
// File Close
////////////////////////////////////////////////////////////////

  **
  ** req
  ** {
  **   u1  'z'
  **   u1  replyNum
  ** }
  **
  static void fileCloseReq(SoxService service, SoxSession session, SendPacket res)
  {
    FileTransfer tx = session.transfer
    tx.mode = FileTransfer.unused
    tx.file.close()

    res.cmd = 'Z'
  }

  **
  ** res
  ** {
  **   u1  'Z'
  **   u1  replyNum
  ** }
  **
  static void fileCloseRes(SoxService service, SoxSession session, SendPacket res)
  {
    prepareRes(service, session, res)
  }

////////////////////////////////////////////////////////////////
// Chunks
////////////////////////////////////////////////////////////////

  **
  ** Service a file chunk request (being put from client to me).
  ** NOTE: used by put (get uses fileSendChunk).
  **
  **   client -> k -> me
  **   req
  **   {
  **     u1   'k'
  **     u1   replyNum (ignored)
  **     u2   chunkNum
  **     u2   chunkSize
  **     u1[chunkSize] chunk
  **   }
  **
  static void fileReceiveChunk(SoxService service, SoxSession session)
  {
    FileTransfer tx = session.transfer

    // check to make sure file is still open for
    // writing before we attempt to do any IO
    if (tx.mode != FileTransfer.put) return

    // parse req
    BufInStream in = service.in
    int chunkNum   = in.readU2()
    int chunkSize  = in.readU2()

    // write file
    tx.file.seek(tx.offset + (chunkNum * tx.chunkSize))
    if (!tx.file.out.writeBytes(service.packet.bytes, in.pos, chunkSize))
      SoxService.log.error("write failed")

    // decrement chunks received, the FileTransfer.checkSet
    // will handle wrapping up once we've received all the chunks
    tx.numChunks -= 1
  }

  **
  ** Send the client the next chunk of the file.
  ** NOTE: used by get (put uses fileReceiveChunk).
  **
  **   me -> k -> client
  **   req
  **   {
  **     u1   'k'
  **     u1   replyNum (ignored)
  **     u2   chunkNum
  **     u2   chunkSize
  **     u1[chunkSize] chunk
  **   }
  **
  static void fileSendChunk(SoxService service, SoxSession session, SendPacket res)
  {
    FileTransfer tx = session.transfer
    Buf packet = service.packet
    int thisChunkNum  = res.u2Data1
    int thisChunkSize = res.u2Data2

    OutStream out = prepareRes(service, session, res)
    out.writeI2(thisChunkNum)
    out.writeI2(thisChunkSize)
    tx.file.seek(tx.offset + (thisChunkNum * tx.chunkSize))
    tx.file.in.readBytes(packet.bytes, packet.size, thisChunkSize)
    packet.size += thisChunkSize
  }

////////////////////////////////////////////////////////////////
// File Rename
////////////////////////////////////////////////////////////////

  **
  ** req
  ** {
  **   u1  'b'
  **   u1   replyNum
  **   str  from
  **   str  to
  ** }
  **
  static void fileRenameReq(SoxService service, SoxSession session, SendPacket res)
  {
    // parse request
    BufInStream in = service.in
    Str from = in.readStrInPlace(tempStr1)
    Str to   = in.readStrInPlace(tempStr2)

    if (!FileStore.rename(from, to)) { res.error(""); return }

    res.cmd = 'B'
  }

  **
  ** res
  ** {
  **   u1  'B'
  **   u1  replyNum
  ** }
  **
  /*
  static void fileRenameRes(SoxService service, SoxSession session, SendPacket res)
  {
    prepareRes(service, session, res)
  }
  */

////////////////////////////////////////////////////////////////
// External Command
////////////////////////////////////////////////////////////////

  **
  ** req
  ** {
  **   u1  'x'
  **   u1   replyNum
  **   u1   cmd
  **   u2   parm
  ** }
  **
  static void extCommandReq(SoxService service, SoxSession session, SendPacket res)
  {
    BufInStream in = service.in
    res.cmd = 'X'
    res.u2Data1 = in.readU2()
    res.u2Data2 = in.readU2()
  }

  **
  ** res
  ** {
  **   u1  'X'
  **   u1  replyNum
  ** }
  **
  static void extCommandRes(SoxService service, SoxSession session, SendPacket res)
  {
    OutStream out = prepareRes(service, session, res)
    int extCmd = ((res.u2Data1 >> 8) & 0xFF)
    int extSubCmd = (res.u2Data1 & 0xFF)
    int parm = res.u2Data2
    switch (extCmd)
    {
      case 'k':
        if (parm == 0xFFFF)
        {
          FileTransfer tx = session.transfer
          File f = tx.file
          f.name = "app.kif"
          if (!f.open("r")) return
          int size = f.size()
          out.write('k')
          out.write('s')
          out.writeI4(size)
          f.close()
        } else {
          FileTransfer tx = session.transfer
          File f = tx.file
          f.name = "app.kif"
          if (!f.open("r")) return
          int size = f.size()
          int offset = parm * 400
          if (offset < size) {
            if (offset + 400 > size)
              size = size - offset
            else
              size = 400
            f.seek(offset)
            out.write('k')
            out.write('d')
            out.writeI2(parm)
            out.writeI2(size)
            f.in.readBytes(service.packet.bytes, service.packet.size, size)
            service.packet.size += size;
          }
          f.close()
        }
        break
      default:
        break
    }
  }

////////////////////////////////////////////////////////////////
// Eventing
////////////////////////////////////////////////////////////////

  **
  ** req
  ** {
  **   u1   'e'
  **   u1   replyNum
  **   u2   componentId
  **   compTree | compProps | compLinks
  **  }
  **
  static void eventRes(SoxService service, SoxSession session, SendPacket p)
  {
    Component c = Sys.app.lookup(p.u2Data1)
    int what = p.u2Data2

    // if component has since been removed
    if (c == null)
    {
      p.error("removed")
      errorRes(service, session, p)
      return
    }

    // create event request and send on its way
    OutStream out = prepareRes(service, session, p)
    out.writeI2(c.id)
    writeComp(service, session, c, what)
  }

////////////////////////////////////////////////////////////////
// Utils
////////////////////////////////////////////////////////////////

  **
  ** Send the request back an error response.
  **
  **   res
  **   {
  **     u1   '!'
  **     u1   replyNum
  **     str  cause
  **   }
  **
  private static void errorRes(SoxService service, SoxSession session, SendPacket p)
  {
    OutStream out = prepareRes(service, session, p)
    out.writeStr((Str)p.refData)
  }

  **
  ** Prepare an outgoing dasp datagram packet.
  **
  private static OutStream prepareRes(SoxService service, SoxSession session, SendPacket p)
  {
    // prepare dasp message with dasp header
    service.packet.clear()
    OutStream out = service.out
    out.writeI2(session.remoteId)
    out.writeI2(p.seqNum)
    out.write(Dasp.DATAGRAM << 4)

    // add ack/ackMore dasp headers
    session.receiveWindow.setAckHeaders(service)

    // sox header
    out.write(p.cmd)
    out.write(p.replyNum)
    return out
  }

  define Log log
  static Str tempStr1
  static Str tempStr2
  static Str tempKey
  static Str tempVal
}
