@niagaraIcon="module://icons/x16/control/numericPoint.png"
class BacWritePropertyVar
  extends BacNetFieldBusIO
{
  // Lujiaming add these at 23/02/24
  ////////////////////////////////////////////////////////////////
  // Constants
  ////////////////////////////////////////////////////////////////
  define Str MAXSEGMENTS = "Unspecified, Segments2, Segments4, Segments8, Segments16, Segments32, Segments64, GreaterThan64, END"
  define int MAXSEGMENTUNDEFED = 0
  define int MAXSEGMENT2 = 1
  define int MAXSEGMENT4 = 2
  define int MAXSEGMENT8 = 3
  define int MAXSEGMENT16 = 4
  define int MAXSEGMENT32 = 5
  define int MAXSEGMENT64 = 6
  define int MAXSEGMENTGREATERTHAN64 = 7
  define int MAXSEGMENTEND = 8
  
  ////////////////////////////////////////////////////////////////
  // Properties
  ////////////////////////////////////////////////////////////////

  @config
  @defaultOnClone
  @unit = Units.millisecond
  @min = 100
  property int refreshTime = 2000

  @readonly
  @unit = Units.millisecond
  property int elapsedTime = -1

  ////////////////////////////////////////////////////////////////
  // config Properties
  ////////////////////////////////////////////////////////////////

  // 
  // @readonly
  property float present_value = 0.0f
  // property float out = 0.0f

  @summary=true
  @config
  @asStr
  property Buf(64) alias = ""

  override void start()
  {
    super.start()
    ** link_type = Component.LINK_TYPE_WRITE
  }
  
  override void changed(Slot slot)
  {
    super.changed(slot)
    if (slot == VarInput.url) {
      log.message("changed slot.name=$slot.name")
      update()
    }
  }

  void makePacket()
  {
    dataLength = 0
    // 0000 .... = APDU Type: Confirmed-REQ (0)
    bacnetPacket[0] = 0x00
    log.message("makePacket::maxAPDULength = ${device.maxAPDULength}")
    bacnetPacket[1] = device.maxAPDULength
    
    // invokeID: Invoke ID: 9
    bacnetPacket[2] = device.invokeID
    device.invokeID = device.invokeID + 1
    if(device.invokeID == 0xFF)
       device.invokeID = 0
    dataLength = 3
     // Service Choice: writeProperty (15)
    bacnetPacket[dataLength++] = 0x0F
    // ObjectIdentifier: analog-value, 14
    bacnetPacket[dataLength++] = 0x0C
    // 0000 0000 10.. .... .... .... .... .... = Object Type: analog-value (2)
    if(objectType > 4)
    {
        bacnetPacket[dataLength++] = objectType / 4
    }
    else 
    {
        bacnetPacket[dataLength++] = 0x00
    }
    bacnetPacket[dataLength++] = (objectType % 4) * 0x40
    // .... .... ..00 0000 0000 0000 0000 0001 = Instance Number: 1
    if(instanceNumber > 0x00)
    {
        bacnetPacket[dataLength++] = instanceNumber / 0x100
    }
    else 
    {
        bacnetPacket[dataLength++] = 0x00
    }
    bacnetPacket[dataLength++] = instanceNumber
    // Property Identifier: present-value (85)
    bacnetPacket[dataLength++] = 0x19
    bacnetPacket[dataLength++] = propertyIdentifier
    
    log.message("----------------- objectType = $objectType ----------------------")
    // .... .110 = Named Tag: Opening Tag (6)
    bacnetPacket[dataLength++] = 0x3E
    // Analog
    if((objectType == BacNetFieldBusIO.BACNET_OBJERCTTYPE_ANALOG_INPUT) 
    || (objectType == BacNetFieldBusIO.BACNET_OBJERCTTYPE_ANALOG_OUTPUT)
    || (objectType == BacNetFieldBusIO.BACNET_OBJERCTTYPE_ANALOG_VALUE))
    {
        // Application Tag: Real (ANSI/IEE-754 floating point), Length/Value/Type: 4
        bacnetPacket[dataLength++] = 0x44
        bufFloat[0] = (float)present_value
        int iLen = bus.encodeFloat(bufFloat, bufData)
        for(int i = 0; i < iLen; i++)
        {
           bacnetPacket[dataLength++] = bufData[i]
        }
    }
    else if((objectType == BacNetFieldBusIO.BACNET_OBJERCTTYPE_BINARY_INPUT) 
         || (objectType == BacNetFieldBusIO.BACNET_OBJERCTTYPE_BINARY_OUTPUT)
         || (objectType == BacNetFieldBusIO.BACNET_OBJERCTTYPE_BINARY_VALUE))
    {
        // Application Tag: Enumerated, Length/Value/Type: 1
        bacnetPacket[dataLength++] = 0x91
        if(present_value == 0.0)
           bacnetPacket[dataLength++] = 0
        else
           bacnetPacket[dataLength++] = 1
    }
    else if((objectType == BacNetFieldBusIO.BACNET_OBJERCTTYPE_MULTISTATE_INPUT) 
         || (objectType == BacNetFieldBusIO.BACNET_OBJERCTTYPE_MULTISTATE_OUTPUT)
         || (objectType == BacNetFieldBusIO.BACNET_OBJERCTTYPE_MULTISTATE_VALUE))
    {
        // Application Tag: Unsigned Integer, Length/Value/Type: 1
        bacnetPacket[dataLength++] = 0x21
        bufInteger[0] = (int)present_value
        int iLen = bus.encodeUnsigned(bufInteger, bufData)
        for(int i = 0; i < iLen; i++)
        {
           bacnetPacket[dataLength++] = bufData[i]
        }
    }
    // .... .111 = Named Tag: Closing Tag (7)
    bacnetPacket[dataLength++] = 0x3F
    // Priority: (Unsigned) 16
    // Context Tag: 4, Length/Value/Type: 1
    bacnetPacket[dataLength++] = 0x49
    // Priority: (Unsigned) 16
    bacnetPacket[dataLength++] = 0x10
    
    log.message("22222 bacnetPacket[$dataLength]")
    for(int i =0 ; i < dataLength; i++)
        buf[i] = (float)bacnetPacket[i]
  }
  
  virtual override void execute()
  {
    ** log.message("BacWritePropertyVar::execute 11111 status=$status") 
    int iDelayCount = 0
    if (bus != null) {
        ** log.message("12121212 status=$status")  // status=4 -> STATUSNODEV
    }
    ** log.message("BacWritePropertyVar::execute 222222 status=$status") 
    if (cache != 0 && bus != null && status <= STATUSREADY) {
      ** log.message("23232323 sendInterval=$sendInterval") 
      if(lastInValue != present_value) {
          makePacket()
          log.message("BacWritePropertyVar after makePacket($dataLength)")
          if (device.writeReg(cache, regId, dataLength, buf) == dataLength) {
            ** log.message("device.readReg")
          } else {
            log.message("BacWritePropertyVar Error")
            status := STATUSOFFLINE
          }
          lastInValue = present_value
      }
    }
    ** log.message("33333 status=$status") 
  }

  int checkWritePropertyData()
  {
    return 0
  }
  define int SEND_INTERVAL = 10
  private inline float[1024] buf
  static inline byte[1024] bacnetPacket
  int dataLength
  // Send interval counter
  float lastInValue = 0.0

  private inline int[2]    bufInteger
  private inline float[2]  bufFloat
  private inline double[2] bufDouble
  static inline byte[8]    bufData
  
}

