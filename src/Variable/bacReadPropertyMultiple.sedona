@niagaraIcon="module://icons/x16/control/numericPoint.png"
class bacReadPropertyMultiple
  extends BacNetFieldBusIO
{
  // Lujiaming add these at 23/02/24
  ////////////////////////////////////////////////////////////////
  // Constants
  ////////////////////////////////////////////////////////////////
  define Str MAXSEGMENTS = "Unspecified, Segments2, Segments4, Segments8, Segments16, Segments32, Segments64, GreaterThan64, END"
  define int MAXSEGMENTUNDEFED = 0
  define int MAXSEGMENT2 = 1
  define int MAXSEGMENT4 = 2
  define int MAXSEGMENT8 = 3
  define int MAXSEGMENT16 = 4
  define int MAXSEGMENT32 = 5
  define int MAXSEGMENT64 = 6
  define int MAXSEGMENTGREATERTHAN64 = 7
  define int MAXSEGMENTEND = 8

  define Str MAXAPDULENGTHS = "50, 128, 206(LonTalk), 480, 1024, 1476(ISO8802), Reserved(6), Reserved(7), Reserved(8), Reserved(9), Reserved(10), Reserved(11), Reserved(12), Reserved(13), Reserved(14), Reserved(15), END"
  define int MAXAPDULENGTH50 = 0
  define int MAXAPDULENGTH128 = 1
  define int MAXAPDULENGTH206 = 2
  define int MAXAPDULENGTH480 = 3
  define int MAXAPDULENGTH1024 = 4
  define int MAXAPDULENGTH1476 = 5
  define int MAXAPDULENGTHReserved6 = 6
  define int MAXAPDULENGTHReserved7 = 7
  define int MAXAPDULENGTHReserved8 = 8
  define int MAXAPDULENGTHReserved9 = 9
  define int MAXAPDULENGTHReserved10 = 10
  define int MAXAPDULENGTHReserved11 = 11
  define int MAXAPDULENGTHReserved12 = 12
  define int MAXAPDULENGTHReserved13 = 13
  define int MAXAPDULENGTHReserved14 = 14
  define int MAXAPDULENGTHReserved15 = 15
  define int MAXAPDULENGTHEND = 16
  
  ////////////////////////////////////////////////////////////////
  // Properties
  ////////////////////////////////////////////////////////////////
  @config
  property int deviceInstance = 0

  @config
  @defaultOnClone
  @unit = Units.millisecond
  @min = 100
  property int refreshTime = 2000

  @readonly
  @unit = Units.millisecond
  property int elapsedTime = -1

  ////////////////////////////////////////////////////////////////
  // config Properties
  ////////////////////////////////////////////////////////////////

  @config
  property int maxAPDULength = 3 // 480
  
  // Read Property Object
  @config
  property int objectReserveType = 8
  
  
  @config
  property int arrayProperty = 5
  // Lujiaming add these end at 23/02/24

  // 
  @readonly
  property float out = 0.0f
  // property float in = 0.0f

  @summary=true
  @config
  @asStr
  property Buf(64) alias = ""

  override void changed(Slot slot)
  {
    super.changed(slot)
    if (slot == VarInput.url) {
      log.message("changed slot.name=$slot.name")
      update()
    }
  }

  void makeReadPacket()
  {
    dataLength = 0
    // 0000 .... = APDU Type: Confirmed-REQ (0)
    bacnetPacket[0] = 0x00
    // if(segmentedMsg == SEGMENTEDMSGENABLE)
    //   bacnetPacket[0] = 0x08
    // .... 0100 = PDU Flags: 0x4
    // if(moreFllows != 0x00)
    //    bacnetPacket[0] += 0x04
    // if(segmentedResponseAccepted == SEGMENTEDRESPONSEACCEPTEDENABLE)
    //    bacnetPacket[0] += 0x02
    // .000 .... = Max Response Segments accepted: Unspecified (0)
    // .... 0011 = Size of Maximum ADPU accepted: Up to 480 octets (fits in an ARCNET frame) (3)
    // if(segmentedResponseAccepted == SEGMENTEDRESPONSEACCEPTEDENABLE)
    // {
    //    // maxSegments and maxAPDULength
    //    // bacnetPacket[1] = maxSegments * 0x10 + maxAPDULength
    //    bacnetPacket[1] = 0x00 * 0x10 + maxAPDULength
    // }
    // else 
    // maxSegments and maxAPDULength
    bacnetPacket[1] = maxAPDULength
    
    // invokeID: Invoke ID: 9
    bacnetPacket[2] = device.invokeID
    device.invokeID = device.invokeID + 1
    if(device.invokeID == 0xFF)
       device.invokeID = 0
    dataLength = 3
    // if(segmentedMsg == SEGMENTEDMSGENABLE)
    // {
    //     bacnetPacket[3] = sequenceNumber
    //     bacnetPacket[4] = proposedWindowSize
    //     dataLength = 5
    // }
    // Service Choice: readPropertyMultiple (14)
    bacnetPacket[dataLength++] = 0x0E
    // ObjectIdentifier: analog-value, 0
    // Context Tag: 0, Length/Value/Type: 4
    // .... 1... = Tag Class: Context Specific Tag
    // 0000 .... = Context Tag Number: 0
    // Length Value Type: 4
    bacnetPacket[dataLength++] = 0x0C
    if(objectType > 4)
    {
        bacnetPacket[dataLength++] = objectType / 4
    }
    else 
    {
        bacnetPacket[dataLength++] = 0x00
    }
    bacnetPacket[dataLength++] = (objectType % 4) * 0x40
    // .... .... ..00 0000 0000 0000 0000 0001 = Instance Number: 1
    if(instanceNumber > 0x00)
    {
        bacnetPacket[dataLength++] = instanceNumber / 0x100
    }
    else 
    {
        bacnetPacket[dataLength++] = 0x00
    }
    bacnetPacket[dataLength++] = instanceNumber % 0x100
    // listOfPropertyReferences  .... .110 = Named Tag: Opening Tag (6)
    bacnetPacket[dataLength++] = 0x1E
    // Property Identifier: required (105)
    bacnetPacket[dataLength++] = 0x09
    bacnetPacket[dataLength++] = 0x69
    // .... .111 = Named Tag: Closing Tag (7)
    bacnetPacket[dataLength++] = 0x1F
    // ObjectIdentifier: analog-value, 1
    bacnetPacket[dataLength++] = 0x0C
    if(objectType > 4)
    {
        bacnetPacket[dataLength++] = objectType / 4
    }
    else 
    {
        bacnetPacket[dataLength++] = 0x00
    }
    bacnetPacket[dataLength++] = (objectType % 4) * 0x40
    // .... .... ..00 0000 0000 0000 0000 0001 = Instance Number: 1
    if(instanceNumber > 0x00)
    {
        bacnetPacket[dataLength++] = instanceNumber / 0x100
    }
    else 
    {
        bacnetPacket[dataLength++] = 0x00
    }
    bacnetPacket[dataLength++] = instanceNumber % 0x100
    // listOfPropertyReferences  .... .110 = Named Tag: Opening Tag (6)
    bacnetPacket[dataLength++] = 0x1E
    // Property Identifier: description (28)
    bacnetPacket[dataLength++] = 0x09
    bacnetPacket[dataLength++] = 0x1C
    // .... .111 = Named Tag: Closing Tag (7)
    bacnetPacket[dataLength++] = 0x1F
    ** log.message("22222 bacnetPacket[$dataLength]")
    for(int i =0 ; i < dataLength; i++)
    {
        buf[i] = (float)bacnetPacket[i]
    }
  }

  
  void makeMultipleReadPacket()
  {
    dataLength = 0
    if(bacnetReadMultipleCount <= 0)
    {
       return
    }
    // 0000 .... = APDU Type: Confirmed-REQ (0)
    bacnetPacket[0] = 0x00
    bacnetPacket[1] = maxAPDULength
    
    // invokeID: Invoke ID: 9
    bacnetPacket[2] = device.invokeID
    device.invokeID = device.invokeID + 1
    if(device.invokeID == 0xFF)
       device.invokeID = 0
    dataLength = 3
    // Service Choice: readPropertyMultiple (14)
    bacnetPacket[dataLength++] = 0x0E
    for(int i = 0; i < bacnetReadMultipleCount; i++)
    {
        // ObjectIdentifier: analog-value, 0
        // Context Tag: 0, Length/Value/Type: 4
        bacnetPacket[dataLength++] = 0x0C
        if(objectType > 4)
        {
            bacnetPacket[dataLength++] = objectType / 4
        }
        else 
        {
            bacnetPacket[dataLength++] = 0x00
        }
        bacnetPacket[dataLength++] = (objectType % 4) * 0x40
        // .... .... ..00 0000 0000 0000 0000 0001 = Instance Number: 1
        if(instanceNumber > 0x00)
        {
            bacnetPacket[dataLength++] = bacnetReadMultipleList[i] / 0x100
        }
        else 
        {
            bacnetPacket[dataLength++] = 0x00
        }
        bacnetPacket[dataLength++] = bacnetReadMultipleList[i] % 0x100
        // listOfPropertyReferences  .... .110 = Named Tag: Opening Tag (6)
        bacnetPacket[dataLength++] = 0x1E
        // Property Identifier: required (105)
        bacnetPacket[dataLength++] = 0x09
        bacnetPacket[dataLength++] = 0x69
        // .... .111 = Named Tag: Closing Tag (7)
        bacnetPacket[dataLength++] = 0x1F
    }
    ** log.message("22222 bacnetPacket[$dataLength]")
    for(int i =0 ; i < dataLength; i++)
    {
        buf[i] = (float)bacnetPacket[i]
    }
  }
  
  virtual override void execute()
  {
    ** log.message("bacreadPropertyMultiple::execute 11111 status=$status") 
    int iDelayCount = 0
    if (bus != null) {
        ** log.message("12121212 status=$status")  // status=4 -> STATUSNODEV
    }
    ** log.message("bacreadPropertyMultiple::execute 222222 status=$status") 
    if (cache != 0 && bus != null && status <= STATUSREADY) {
      long nowNanoSecond  = Sys.ticks()
      long nowMilliSecond = nowNanoSecond / (long)1000000
      ** log.message("23232323 sendInterval=$sendInterval and nowMilliSecond=$nowMilliSecond")
      if(sendInterval < nowMilliSecond) {
        log.message("333333 bacnetReadMultipleCount=$bacnetReadMultipleCount")
        if(bacnetReadMultipleCount == -1){
          makeReadPacket()
          ** log.message("111111 makePacket($dataLength) with sendInterval=$sendInterval and nowMilliSecond=$nowMilliSecond")
          if (device.writeReg(cache, regId, dataLength, buf) == dataLength) {
            ** log.message("device.readReg")
          } else {
            log.message("BacReadPropertyVar Error")
            status := STATUSOFFLINE
          }
        }
        else if(bacnetReadMultipleCount == 0){
           log.message("ReadMultiple Disable")
        }
        else if(bacnetReadMultipleCount > 0){
          makeMultipleReadPacket()
          ** log.message("111111 makePacket($dataLength) with sendInterval=$sendInterval and nowMilliSecond=$nowMilliSecond")
          if (device.writeReg(cache, regId, dataLength, buf) == dataLength) {
            ** log.message("device.readReg")
          } else {
            log.message("BacReadPropertyVar Error")
            status := STATUSOFFLINE
          }
        }
        sendInterval = nowMilliSecond + (long)refreshTime
      }
    }
    ** log.message("33333 status=$status") 
  }

  void setBacReadPropertyVarByProperty(int tagNumber, byte[] data, int iLen)
  {
    ** log.message("setBacReadProperty with iLen = $iLen and tagNumber=$tagNumber")
    switch (tagNumber)
    {
        case BacNetFieldBusIO.BANET_PROPVAR_BOOLEANAPPTAG:
            if(data[0] != 0x00)
                out := 1.0
            else
                out := 0.0
            break
        case BacNetFieldBusIO.BANET_PROPVAR_OBJECTIDENTIFIERAPPTAG:
            // 0000 0010 00.. .... .... .... .... .... = Object Type: device (8)
            // int objectType = (data[0] * 0x100 + data[1]) / 0x40
            // .... .... ..00 0000 0000 0011 1110 1001 = Instance Number: 1001
            int instanceNumber = 0x00
            instanceNumber = data[1] % 0x40
            instanceNumber = instanceNumber * 0x100 + data[2]
            instanceNumber = instanceNumber * 0x100 + data[3]
            out := (float)instanceNumber
            log.message("objectType = $objectType and instanceNumber=$out")
            break
        case BacNetFieldBusIO.BANET_PROPVAR_ENUMERATEDAPPTAG:
        case BacNetFieldBusIO.BANET_PROPVAR_UNSIGNEDINTAPPTAG:
            bus.decodeUnsigned(data, iLen, bufInteger)
            out := (float)bufInteger[0]
            log.message("-------------------------------------------------------------------------------")
            log.message("-------------------------ReadPropertyMultipleUnsignedInteger = $out------------------")
            log.message("-------------------------------------------------------------------------------")
            break
        case BacNetFieldBusIO.BANET_PROPVAR_INTEGERAPPTAG:
            bus.decodeUnsigned(data, iLen, bufInteger)
            out := (float)bufInteger[0]
            log.message("-------------------------------------------------------------------------------")
            log.message("------------------------ReadPropertyMultipleSignedInteger = $out------------------")
            log.message("-------------------------------------------------------------------------------")
            break
        case BacNetFieldBusIO.BANET_PROPVAR_REALAPPTAG:
            bus.decodeFloat(data, bufFloat)
            out := (float)bufFloat[0]
            log.message("-------------------------------------------------------------------------------")
            log.message("--------------------------ReadPropertyMultipleFloat = $out--------------------")
            log.message("-------------------------------------------------------------------------------")
            break
        case BacNetFieldBusIO.BANET_PROPVAR_DOUBLEAPPTAG:
            bus.decodeDouble(data, bufDouble)
            out := (float)bufDouble[0]
            log.message("-------------------------------------------------------------------------------")
            log.message("-------------------------ReadPropertyMultipleDouble = $out--------------------")
            log.message("-------------------------------------------------------------------------------")
            break
        // case BANET_PROPVAR_NULLAPPTAG:
        case BacNetFieldBusIO.BANET_PROPVAR_BITSTRINGAPPTAG:
        case BacNetFieldBusIO.BANET_PROPVAR_OCTETSTRINGAPPTAG:
            for (int i = 0; i < iLen; i++)
            {
               strInfo.set(i, data[i])
            }
            strInfo.set(iLen, '\0')
            ** log.message("bacreadPropertyMultiple Character string = $strInfo ")
            break
        case BacNetFieldBusIO.BANET_PROPVAR_CHARACTERSTRINGAPPTAG:
            for (int i = 0; i < iLen; i++)
            {
               strInfo.set(i, data[i])
            }
            strInfo.set(iLen, '\0')
            ** log.message("bacreadPropertyMultiple Character string = $strInfo ")
            break
        case BacNetFieldBusIO.BANET_PROPVAR_DATEAPPTAG:
            break
        case BacNetFieldBusIO.BANET_PROPVAR_TIMEAPPTAG:
            break
        // case BANET_PROPVAR_RESERVEDAPPTAG13:
        // case BANET_PROPVAR_RESERVEDAPPTAG14:
        // case BANET_PROPVAR_RESERVEDAPPTAG15:
        default:
            log.message("Not support $tagNumber ")
            break
    }
  }
  
  define int SEND_INTERVAL = 30
  
  private inline float[1024] buf
  static inline byte[1024] bacnetPacket
  int dataLength
  // Send interval counter
  long sendInterval = (long)0

  private inline int[2]    bufInteger
  private inline float[2]  bufFloat
  private inline double[2] bufDouble
  
  private inline Str(128)   strInfo

  // -1                - We donot use ReadMultiple
  // 0                 - We use ReadMultiple and do nothing
  // Positive number   - We use ReadMultiple and use instance number list
  int                     bacnetReadMultipleCount = -1
  inline int[128]  bacnetReadMultipleList

}
