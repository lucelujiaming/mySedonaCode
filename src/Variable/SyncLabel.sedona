@niagaraIcon="module://icons/x16/control/numericPoint.png"
class SyncLabel
  extends Component
{
  define Str IO_MODE_RANGE = "Input, Output, END"
  define int IO_MODE_INPUT                      = 0x00
  define int IO_MODE_OUTPUT                     = 0x01
  define int IO_MODE_END                        = 0x02
  
  define Str DATA_TYPE_RANGE = "FloatData, IntData, END"
  define int DATA_TYPE_FLOAT                       = 0x00
  define int DATA_TYPE_INTEGAR                     = 0x01
  define int DATA_TYPE_END                         = 0x02
  
  ////////////////////////////////////////////////////////////////
  // Properties
  ////////////////////////////////////////////////////////////////
  @config
  @range = IO_MODE_RANGE
  @fieldWidth = 200
  property int ioMode = IO_MODE_INPUT

  @config
  @range = DATA_TYPE_RANGE
  @fieldWidth = 200
  property int dataType = DATA_TYPE_FLOAT
  

  @readonly
  property float outFloatValue = 0.0f

  property float inFloatValue = 0.0f
  
  @readonly
  property int outIntValue = 0

  property int inIntValue = 0

  @summary=true
  @config
  @asStr
  property Buf(64) alias = ""
  
  override void start()
  {
  }

  override void changed(Slot slot)
  {
    super.changed(slot)
    ** log.message("changed It cannot delete")
    if (slot == SyncLabel.inFloatValue) {
       ** log.message("33333 SyncLabel inFloatValue=$inFloatValue and outFloatValue=$outFloatValue")
    } else if (slot == SyncLabel.inIntValue) {
       ** log.message("44444 SyncLabel inIntValue=$inIntValue and outIntValue=$outIntValue")
       inFloatValue := (float)inIntValue
    }
  }

  virtual override void execute()
  {
      Str aliasStr = alias.toStr()
      ** log.message("111111111 SyncLabel name=$name")
      // find bus and dev
      Component p = Sys.app.lookup(this.parent)
      Component root = null
      while (p != null) {
        root = p
        p = Sys.app.lookup(p.parent)
      }
      // Only use inFloatValue and CellBanch does not use inIntValue.
      inIntValue := (int)inFloatValue
      
      if (root != null) {
        // log.message("root:: aliasStr=$aliasStr")
        ** log.message("222222222 SyncLabel name=$name and aliasStr]=$aliasStr")
        for (Component f = Sys.app.lookup(root.children); f != null; f = Sys.app.lookup(f.nextSibling)) {
          // Remove Folder limit
          // if (f.type.is(Folder.type) && f.name.equals("play")) {
          if (f.type.is(Folder.type)) {
             for (Component n = Sys.app.lookup(f.children); n != null; n = Sys.app.lookup(n.nextSibling)) {
                ** log.message("3333 SyncLabel name=$name and aliasStr]=$aliasStr")
                if (n.type.is(SyncLabel.type) 
                     && ((SyncLabel)n).alias.toStr().equals(aliasStr)
                     && ((SyncLabel)n).dataType == dataType) {
                     
                     ** log.message("444 SyncLabel outFloatValue=$outFloatValue and outIntValue=$outIntValue with name=$name and aliasStr]=$aliasStr")
                     if ((((SyncLabel)n).ioMode == IO_MODE_INPUT) && 
                             (ioMode == IO_MODE_OUTPUT)) {
                         ** log.message("555 SyncLabel n.inFloatValue=${((SyncLabel)n).inFloatValue} and n.inIntValue=${((SyncLabel)n).inIntValue} with n.name=${((SyncLabel)n).name}")
                         ** log.message("555 SyncLabel outFloatValue=$outFloatValue and outIntValue=$outIntValue with name=$name")
                         // if(dataType == DATA_TYPE_FLOAT)
                         // {
                         outFloatValue := ((SyncLabel)n).inFloatValue
                         // } 
                         // else if(dataType == DATA_TYPE_INTEGAR)
                         // {
                         outIntValue := ((SyncLabel)n).inIntValue
                         //}                 
                     }
                     ** log.message("666 SyncLabel outFloatValue=$outFloatValue and outIntValue=$outIntValue with name=$name and aliasStr]=$aliasStr")
                }
             }
          }
        }
     }
   }
}
