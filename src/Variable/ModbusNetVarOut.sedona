@niagaraIcon="module://icons/x16/control/numericPoint.png"
class ModbusNetVarOut
  extends FieldBusIO
{
  @readonly
  property float out = 0.0f

  property float in = 0.0f

  @summary=true
  @config
  @asStr
  property Buf(64) alias = ""

  @config
  property bool isOutofService = false
  
  @config
  property float outofservice_value = 0.0f
  
  override void changed(Slot slot)
  {
    int iRet = -1
    super.changed(slot)
    if (slot == ModbusNetVarOut.in) {
      if (cache != 0 && bus != null && status <= STATUSOK) {
        buf[0] = in
        iRet = bus.writeReg(cache, regId, typeId, buf)
        if(iRet <= 0)
        {
	        if(device != null)
	        {
	           device.modbusRTUMasterWrite(
           			device.ctx, cache, regId, typeId, buf)
	        }
        }
      }
    } 
    if (slot == ModbusNetVarOut.device_name || slot == ModbusNetVarOut.io_type || slot == ModbusNetVarOut.Address) {
      log.message("changed slot.name=$slot.name")
      update()
      needUpdate = true
    }
  }
  virtual override void execute()
  {
    int iRet = -1
    ** log.message("11111 name=$name")
    if (bus != null) {
        ** log.message("11111 bus.busId=$busId ")
    }
    if(isOutofService == true)
    {
    	out := outofservice_value
        log.message("ModbusNetVarOut:: isOutofService == true")  // status=4 -> STATUSNODEV
        return
    }
    if (cache != 0 && bus != null && status <= STATUSREADY) {
      log.message("22222 ModbusNetVarOut::regId=$regId typeId=$typeId")
      if (bus.readReg(cache, regId, typeId, buf) == dataLen) {
        out := buf[0]
        log.message("33333 ModbusNetVarOut::out=$out")
        status := STATUSOK
      } else {
        if(device != null)
        {
           if (device.modbusRTUMasterRead(
           			device.ctx, cache, regId, typeId, buf) == dataLen) {
	         out := buf[0]
	         log.message("4444 ModbusNetVarIn::out=$out")
	         status := STATUSOK
	       } else {
	           log.message("55555 ModbusNetVarIn::regId=$regId typeId=$typeId")
	           out := 0.0f
	           status := STATUSOFFLINE
	       } 
        }
        else 
        {
           log.message("666666 ModbusNetVarOut::regId=$regId typeId=$typeId")
           out := 0.0f
           status := STATUSOFFLINE
        }
      }
    }
    if (needUpdate && isSlotLinkToIN() && cache != 0 && bus != null && status <= STATUSOK) {
      buf[0] = in
      iRet = bus.writeReg(cache, regId, typeId, buf)
      if(iRet <= 0)
      {
	      if(device != null)
	      {
	         device.modbusRTUMasterWrite(
         			device.ctx, cache, regId, typeId, buf)
	      }
      }
      needUpdate = false
    }
    if (!isSlotLinkToIN() || cache == 0) {
      needUpdate = true
    }
  }
  private bool isSlotLinkToIN()
  {
    for (Link link = linksTo; link != null; link = link.nextTo) {
      Slot slot = type.slot(link.toSlot)
      if (slot == ModbusNetVarOut.in) {
        return true
      }
    }
    return false
  }

  private inline float[1] buf
  private bool needUpdate = true
}
