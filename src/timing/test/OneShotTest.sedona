//
// Copyright (c) 2011 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   12 Dec 11  Elizabeth McKenney  Creation
//

**
** OneShotTest
**
class OneShotTest
  extends Test
{
  static inline OneShot  sh

  static long  appPeriod = 0L
 
  static void test()
  {
    // Set up const
    appPeriod = (long)Sys.app.scanPeriod*1ms

    sh.pulseWidth := 1.0       // sec


    //
    // First, test non-retriggerable
    //
    Sys.out.print("\tTesting non-retriggerable pulse\n")
    sh.canRetrig  := false
    // Generate rising edge
    sh.in := false
    sh.execute()
    sh.in := true
    // Execute for 0.5 pulse width
    process(500ms)   
    // Output should be active
    assert(sh.out == true)
    // Generate another rising edge
    sh.in := false
    sh.execute()
    sh.in := true
    // Execute for 0.6 pulse width
    process(600ms)   
    // Output should be inactive
    assert(sh.out == false)


    //
    // Second, test retriggerable
    //
    Sys.out.print("\tTesting retriggerable pulse\n")
    sh.canRetrig  := true
    // Generate rising edge
    sh.in := false
    sh.execute()
    sh.in := true
    // Execute for 0.5 pulse width
    process(500ms)   
    // Output should be active
    assert(sh.out == true)
    // Generate another rising edge
    sh.in := false
    sh.execute()
    sh.in := true
    // Execute for 0.5 pulse width
    process(500ms)   
    // Output should still be active
    assert(sh.out == true)
    // Execute for 0.6 pulse width
    process(600ms)   
    // Output should now be inactive
    assert(sh.out == false)


    //
    // Third, test clear action
    //
    Sys.out.print("\tTesting clear() action\n")
    sh.canRetrig  := true
    // Generate rising edge
    sh.in := false
    sh.execute()
    sh.in := true
    // Execute for 0.5 pulse width
    process(500ms)   
    // Output should be active
    assert(sh.out == true)
    // Invoke clear()
    sh.clear()
    // Output should now be inactive
    assert(sh.out == false)
    // Execute for 0.1 pulse width
    process(100ms)   
    // Output should still be inactive
    assert(sh.out == false)


  }


  //
  // process - spin until duration expires
  //
  static void process(long duration)
  {
    long now = Sys.ticks()
    long stoptime = now + duration

    while (now < stoptime)
    {
      doCycle()
      now = Sys.ticks()
    }
  }


  //
  // doCycle - one app cycle, including sleep
  //
  static void doCycle()
  {
    long t1 = Sys.ticks()
    sh.execute()

    //Sys.out.print("  in = ${sh.in}   out = ${sh.out}\n")

    // sleep rest of cycle
    long st = t1 + appPeriod - Sys.ticks()
    Sys.sleep(st)
  }


}
