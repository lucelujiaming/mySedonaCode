class tcpClient
  extends FieldBusNet
{
  ////////////////////////////////////////////////////////////////
  // Constants
  ////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////
  // Properties
  ////////////////////////////////////////////////////////////////
  @config
  @asStr
  property Buf(20) ipaddr = "127.0.0.1"

  @config
  @defaultOnClone
  @max = 65535
  property int port = 502

  ////////////////////////////////////////////////////////////////
  // Life cycle
  ////////////////////////////////////////////////////////////////
  override void start()
  {
    update()
  }
  override void changed(Slot slot)
  {
    super.changed(slot)
    if (slot == tcpClient.ipaddr || slot == tcpClient.port) {
      update()
    }
  }
  override void stop()
  {
    if (ctx != -1) {
      cleanCache()
      dC(ctx)
      ctx = -1
      busId = 0
    }
  }
  override void execute()
  {
    if (status != STATUSNODEV && needFlush) {
      flush()
      needFlush = false
    }
    if (status == STATUSOK) {
      for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
        if (d.type.is(mbDevice.type) && ((mbDevice)d).status <= mbDevice.STATUSREADY) {
          if (readReg(((mbDevice)d).address, 0, 1, buffer) == 1) {
            ((mbDevice)d).elapsedTime := (int)buffer[0]
            ((mbDevice)d).status := mbDevice.STATUSOK
          } else {
            ((mbDevice)d).elapsedTime := -1
            ((mbDevice)d).status := mbDevice.STATUSOFFLINE
          }
        }
      }
    }
  }

  ////////////////////////////////////////////////////////////////
  // App support
  ////////////////////////////////////////////////////////////////
  private void flush()
  {
    if (ctx != -1) {
      cleanCache()
      dC(ctx)
      ctx = -1
      busId = 0
    }
    ctx = dO(ipaddr.toStr(), port)
    if (ctx != -1) {
      if (updateCache()) {
        // 结束添加标记。
        dA(ctx, 0, 0, 0, 0)
        status := STATUSOK
      } else {
        status := STATUSNOREG
      }
    } else {
      status := STATUSBUSY
    }
  }
  private void cleanCache()
  {
    Component root
    Component p = this
    int id = 0
    if (ctx == 0) {
      id = 12
    }

    if (id == 0) {
      return
    }

    while (Sys.app.lookup(p.parent) != null) {
      p = Sys.app.lookup(p.parent)
    }

    root = p
    for (Component f = Sys.app.lookup(root.children); f != null; f = Sys.app.lookup(f.nextSibling)) {
      if (f.type.is(Folder.type) && !f.name.equals("service")) {
        for (Component r = Sys.app.lookup(f.children); r != null; r = Sys.app.lookup(r.nextSibling)) {
          if (r.type.is(FieldBusIO.type) && ((FieldBusIO)r).busId == id) {
            ((FieldBusIO)r).bus = null
            ((FieldBusIO)r).cache = 0
            ((FieldBusIO)r).busId = 0
            ((FieldBusIO)r).status := FieldBusIO.STATUSNODEV
          }
        }
      }
    }
  }
  private bool updateCache()
  {
    Component root
    Component p = this
    bool result = false
    if (ctx == 0) {
      busId = 12
    }

    if (busId == 0) {
      return result
    }

    // add device node.
    for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
      if (d.type.is(mbDevice.type) && ((mbDevice)d).status < mbDevice.STATUSEADDR) {
        if (dA(ctx, ((mbDevice)d).address, 0, 0, ((mbDevice)d).refreshTime) != 0) {
          ((mbDevice)d).status := mbDevice.STATUSEINNER
        } else {
          ((mbDevice)d).status := mbDevice.STATUSNOREG
        }
      }
    }

    // add register node in play.
    while (Sys.app.lookup(p.parent) != null) {
      p = Sys.app.lookup(p.parent)
    }

    root = p
    for (Component f = Sys.app.lookup(root.children); f != null; f = Sys.app.lookup(f.nextSibling)) {
      if (f.type.is(Folder.type) && !f.name.equals("service")) {
        for (Component r = Sys.app.lookup(f.children); r != null; r = Sys.app.lookup(r.nextSibling)) {
          if (r.type.is(FieldBusIO.type) && ((FieldBusIO)r).status < FieldBusIO.STATUSEURL && ((FieldBusIO)r).busId == 0) {
            mbDevice dev = null
            for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
              if (d.type.is(mbDevice.type) && ((FieldBusIO)r).devStr.equals(((mbDevice)d).deviceName.toStr())) {
                dev = (mbDevice)d
                break
              }
            }
            if (dev != null) {
              if (((FieldBusIO)r).dataLen == 1) {
                ((FieldBusIO)r).cache = dA(ctx, dev.address + (dev.endian << 8), ((FieldBusIO)r).regId, 1, dev.refreshTime)
              } else if (((FieldBusIO)r).dataLen == 2) {
                ((FieldBusIO)r).cache = dA(ctx, dev.address + (dev.endian << 8), ((FieldBusIO)r).regId + 1, 1, dev.refreshTime)
                if (((FieldBusIO)r).cache != 0) {
                  ((FieldBusIO)r).cache = dA(ctx, dev.address + (dev.endian << 8), ((FieldBusIO)r).regId, 1, dev.refreshTime)
                }
              }
              if (((FieldBusIO)r).cache != 0) {
                if (((FieldBusIO)r).bus == null) {
                  ((FieldBusIO)r).bus = this
                }
                ((FieldBusIO)r).status := FieldBusIO.STATUSREADY
                dev.status := mbDevice.STATUSREADY
                result = true
              } else {
                ((FieldBusIO)r).status := FieldBusIO.STATUSEADDR
              }
            } else {
              //((FieldBusIO)r).status := FieldBusIO.STATUSNODEV
            }
          }
        }
      }
    }

    return result
  }

  override void update()
  {
    bool isDevFound = false
    for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
      if (d.type.is(mbDevice.type) && ((mbDevice)d).status != mbDevice.STATUSEND) {
        isDevFound = true
        break
      }
    }
    if (isDevFound) {
      status := STATUSNOREG
    } else {
      status := STATUSNODEV
    }
    needFlush = true
  }
  override int readReg(int deviceAddr, int addr, int len, float[] buf)
  {
      if(ctx == -1){
          return -1
      }
      return dR(ctx, deviceAddr, addr, len, buf)
  }

  override int writeReg(int deviceAddr, int addr, int len, float[] buf)
  {
      if(ctx == -1){
          return -1
      }
      if (!((addr > 0 && addr < 10000) || (addr > 40000 && addr < 50000))) {
          return -1
      }
      return dW(ctx, deviceAddr, addr, len, buf)
  }

  ////////////////////////////////////////////////////////////////
  // Fields
  ////////////////////////////////////////////////////////////////
  private int ctx = -1

  native int dO(Str ip, int port)

  native int dC(int ctx)

  native int dA(int ctx, int deviceAddr, int addr, int len, int refreshms)

  native int dR(int ctx, int deviceAddr, int addr, int len, float[] buf)

  native int dW(int ctx, int deviceAddr, int addr, int len, float[] buf)
}
