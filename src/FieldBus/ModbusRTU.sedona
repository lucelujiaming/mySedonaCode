class ModbusRTU
  extends FieldBusNet
{
  ////////////////////////////////////////////////////////////////
  // Constants
  ////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////
  // Properties
  ////////////////////////////////////////////////////////////////
  @config
  @min = 0
  @max = 1
  @range = "Port1, Port2"
  @fieldWidth = 10
  property int port = 0

  @config
  @defaultOnClone
  @min = 1200
  @max = 115200
  @fieldWidth=10
  property int band = 19200

  @config
  @defaultOnClone
  @min = 0
  @max = 2
  @range = "None, Even, Odd"
  @fieldWidth = 10
  property int parity = 0

  @config
  @defaultOnClone
  @min=7
  @max=8
  @fieldWidth=10
  property int dataBits = 8

  @config
  @defaultOnClone
  @min=1
  @max=2
  @fieldWidth=10
  property int stopBits = 1

  @config
  @unit = Units.second
  property int retryDelay = 60

  @config
  @unit = Units.millisecond
  property int responseTimeout= 500

  ////////////////////////////////////////////////////////////////
  // Life cycle
  ////////////////////////////////////////////////////////////////
  override void start()
  {
    sub_fieldbusnet_type_id = SUB_FIELDBUSNET_TYPE_MODBUS_RTU
    update()
  }
  override void changed(Slot slot)
  {
    super.changed(slot)
    if (slot == ModbusRTU.port || slot == ModbusRTU.band || 
        slot == ModbusRTU.parity || slot == ModbusRTU.dataBits || 
        slot == ModbusRTU.stopBits || slot == ModbusRTU.retryDelay || 
        slot == ModbusRTU.responseTimeout) {
      update()
    }
  }
  override void stop()
  {
    // if (ctx != -1) {
    //   cleanCache()
    //   dC(ctx)
    //   ctx = -1
    //   busId = 0
    // }
    
    for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
        if (d.type.is(ModbusRemDev.type)) {
          if (((ModbusRemDev)d).ctx != -1) {
              cleanCache()
              ((ModbusRemDev)d).dRtuC(((ModbusRemDev)d).ctx)
              ((ModbusRemDev)d).ctx = -1
            busId = 0
          } 
        }
        else if (d.type.is(ModbusLocDev.type)) {
          if (((ModbusLocDev)d).ctx != -1) {
              cleanCache()
              ((ModbusLocDev)d).dRtuC(((ModbusLocDev)d).ctx)
              ((ModbusLocDev)d).ctx = -1
            busId = 0
          } 
        }
    }
  }
  override void execute()
  {
    if (status != STATUSNODEV && needFlush) {
      flush()
      needFlush = false
    }
    // Read Modbus 
    if (status == STATUSOK) {
      for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
        if (d.type.is(ModbusRemDev.type) && ((ModbusRemDev)d).status <= ModbusRemDev.STATUSREADY) {
          if (((ModbusRemDev)d).modbusRTUMasterRead(
	                         ((ModbusRemDev)d).ctx, ((ModbusRemDev)d).address, 0, 1, buffer) == 3) {
            ((ModbusRemDev)d).elapsedTime := (int)buffer[0]
            ((ModbusRemDev)d).packetsTotal := (int)buffer[1]
            ((ModbusRemDev)d).packetsError := (int)buffer[2]
            ((ModbusRemDev)d).status := ModbusRemDev.STATUSOK
          } else {
            ((ModbusRemDev)d).elapsedTime := -1
            ((ModbusRemDev)d).packetsTotal := -1
            ((ModbusRemDev)d).packetsError := -1
            ((ModbusRemDev)d).status := ModbusRemDev.STATUSOFFLINE
          }
          d.execute()
        }
        else if (d.type.is(ModbusLocDev.type) && ((ModbusLocDev)d).status <= ModbusLocDev.STATUSREADY) {
          ** log.message("ModbusRTU::execute ((ModbusLocDev)d).modbusRTUSlaveRead")
          if (((ModbusLocDev)d).modbusRTUSlaveRead(
	                 ((ModbusLocDev)d).ctx, ((ModbusLocDev)d).address, 0, 1, buffer) == 1) {
				** log.message("6666 ModbusRTU::execute LOC_RTU modbusRTUSlaveRead buffer=${buffer[0]}")
	            ((ModbusLocDev)d).elapsedTime := (int)buffer[0]
	            ((ModbusLocDev)d).status := ModbusLocDev.STATUSOK
          } else {
			    log.message("7777 ModbusRTU::execute LOC_RTU modbusRTUSlaveRead")
	            ((ModbusLocDev)d).elapsedTime := -1
	            ((ModbusLocDev)d).status := ModbusLocDev.STATUSOFFLINE
          }
          d.execute()
        }
      }
      updateVariable()
    }
  }
  
 
  private void updateVariable()
  {
     ** log.message("Enter updateVariable name=$name")
     // log.message("root:: aliasStr=$aliasStr")
     for (Component f = Sys.app.lookup(children); f != null; f = Sys.app.lookup(f.nextSibling)) {
        log.message("children updateVariable name=$name")
       if (f.type.is(Variable.type) && !f.name.equals("service")) {
         Str nameComponentStr = ((Variable)f).name
         ** log.message("updateVariable nameComponentStr=$nameComponentStr and name=$name")
         f.execute()
       }
     }
     ** log.message("Left updateVariable name=$name")
  }

 
  ////////////////////////////////////////////////////////////////
  // App support
  ////////////////////////////////////////////////////////////////
  private void flush()
  {
	log.message("4343434 ModbusRTU flush")
    // if (ctx != -1) {
    //   cleanCache()
    //   dC(ctx)
    //   ctx = -1
    //   busId = 0
    // }
    int iRemCtxIdx = 0
    int iLocCtxIdx = 0
    for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
        if (d.type.is(ModbusRemDev.type)) {
          // if (((ModbusRemDev)d).ctx != -1) {
               log.message("4343434 ModbusRTU ModbusRemDev cleanCache by ((ModbusRemDev)d).ctx = ${((ModbusRemDev)d).ctx}")
               cleanCache()
               log.message("4343434 ModbusRTU ModbusRemDev modbusTCPClientClose")
               ((ModbusRemDev)d).modbusRTUMasterClose(iRemCtxIdx)
               iRemCtxIdx = iRemCtxIdx + 1
               ((ModbusRemDev)d).ctx = -1
               busId = 0
               log.message("11111 flush ((ModbusRemDev)d).status=${((ModbusRemDev)d).status}")
            // } 
            // else {
			//    log.message("ModbusRemDev)d).ctx == -1")
            // } 
        }
        else if (d.type.is(ModbusLocDev.type)) {
            // if (((ModbusLocDev)d).ctx != -1) {
               log.message("4343434 ModbusRTU ModbusLocDev cleanCache by ((ModbusRemDev)d).ctx = ${((ModbusRemDev)d).ctx}")
               cleanCache()
               log.message("4343434 ModbusRTU ModbusLocDev modbusTCPServerClose")
              ((ModbusLocDev)d).modbusRTUSlaveClose(iLocCtxIdx)
               iLocCtxIdx = iLocCtxIdx + 1
               ((ModbusLocDev)d).ctx = -1
               busId = 0
               log.message("11111 flush ((ModbusLocDev)d).status=${((ModbusLocDev)d).status}")
            // } 
            // else {
            //    log.message("ModbusLocDev)d).ctx == -1")
            // } 
        }
    }
	log.message("4343434 ModbusRTU ctx = dO(port, band, parity, dataBits, stopBits, retryDelay, responseTimeout)")
    // ctx = dO(port, band, parity, dataBits, stopBits, retryDelay, responseTimeout)
    // add device node.
    bool bRet = false
    for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
      if (d.type.is(ModbusRemDev.type)) {
          ((ModbusRemDev)d).bus = this
          ((ModbusRemDev)d).ctx = ((ModbusRemDev)d).modbusRTUMasterOpen(
                     port, band, parity, dataBits, stopBits, retryDelay, responseTimeout)
            log.message("22222 flush ((ModbusRemDev)d).status=${((ModbusRemDev)d).status}")
      }
      else if (d.type.is(ModbusLocDev.type)) {
          ((ModbusLocDev)d).bus = this
          ((ModbusLocDev)d).ctx = ((ModbusLocDev)d).modbusRTUSlaveOpen(
                     port, band, parity, dataBits, stopBits)
            log.message("22222 flush ((ModbusLocDev)d).status=${((ModbusLocDev)d).status}")
      }
    }
    
    if (bRet == false) {
      if (updateCache()) {
        // 结束添加标记。
        for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
            if (d.type.is(ModbusRemDev.type)) {
                // dA(ctx, 0, 0, 0, 0, 0)
                ((ModbusRemDev)d).modbusRTUMasterAdd(
                         ((ModbusRemDev)d).ctx, 0, 0, 0, 0, 0)
                log.message("ModbusRTU modbusRTUMasterAdd flush status=$status");
                log.message("33333 flush ((ModbusRemDev)d).status=${((ModbusRemDev)d).status}")
            }
            else if (d.type.is(ModbusLocDev.type)) {
                // dA(ctx, 0, 0, 0, 0, 0)
                ((ModbusLocDev)d).modbusRTUSlaveAdd(
                         ((ModbusLocDev)d).ctx, 0, 0, 0)
                log.message("ModbusRTU modbusRTUSlaveAdd flush status=$status");
                log.message("3333 ModbusRTU modbusRTUSlaveAdd updateCache ((ModbusLocDev)d).status=${((ModbusLocDev)d).status}")
            }
        }
        status := STATUSOK
      } else {
        status := STATUSNOREG
      }
    } else {
      status := STATUSBUSY
    }
  }
  private void cleanCache()
  {
    Component root
    Component p = this
    int id = 0
    // if (ctx == 0) {
    //   id = 11
    // }
    // 
    // if (id == 0) {
    //   return
    // }

    while (Sys.app.lookup(p.parent) != null) {
      p = Sys.app.lookup(p.parent)
    }
    
    root = p
    for (Component f = Sys.app.lookup(root.children); f != null; f = Sys.app.lookup(f.nextSibling)) {
      if (f.type.is(Folder.type) && !f.name.equals("service")) {
        for (Component r = Sys.app.lookup(f.children); r != null; r = Sys.app.lookup(r.nextSibling)) {
          if (r.type.is(ModbusFieldBusIO.type)) {
            ((ModbusFieldBusIO)r).bus = null
            ((ModbusFieldBusIO)r).cache = 0
            ((ModbusFieldBusIO)r).busId = 0
            ((ModbusFieldBusIO)r).status := ModbusFieldBusIO.STATUSNODEV
          }
        }
      }
    }
  }
  private bool updateCache()
  {
    Component root
    Component p = this
    bool result = false

    log.message("AAAAAA updateCache ");
    // add device node.
    for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
      log.message("ABABBAA ModbusRTU::updateCache ");
      if (d.type.is(ModbusRemDev.type) && ((ModbusRemDev)d).status < ModbusRemDev.STATUSEADDR) {
          // if (dA(ctx, ((ModbusRemDev)d).address, 0, 0, ((ModbusRemDev)d).refreshTime, ((ModbusRemDev)d).pointDelay) != 0) {
          //   ((ModbusRemDev)d).status := ModbusRemDev.STATUSEINNER
          // } else {
          //   ((ModbusRemDev)d).status := ModbusRemDev.STATUSNOREG
          // }
          log.message("CCCC ModbusRTU::updateCache ModbusRemDev::ctx = ${((ModbusRemDev)d).ctx}");
          int iRet = ((ModbusRemDev)d).modbusRTUMasterAdd(((ModbusRemDev)d).ctx, 
                            ((ModbusRemDev)d).address, 0, 0, ((ModbusRemDev)d).refreshTime, ((ModbusRemDev)d).pointDelay)
          if (iRet != 0) {
            ((ModbusRemDev)d).status := ModbusRemDev.STATUSEINNER
          } else {
            ((ModbusRemDev)d).status := ModbusRemDev.STATUSNOREG
          }
      }
      else if (d.type.is(ModbusLocDev.type) && ((ModbusLocDev)d).status < ModbusLocDev.STATUSEADDR) {
          // if (dA(ctx, ((ModbusRemDev)d).address, 0, 0, ((ModbusRemDev)d).refreshTime, ((ModbusRemDev)d).pointDelay) != 0) {
          //   ((ModbusRemDev)d).status := ModbusRemDev.STATUSEINNER
          // } else {
          //   ((ModbusRemDev)d).status := ModbusRemDev.STATUSNOREG
          // }
          log.message("CCCC ModbusRTU::updateCache ModbusLocDev::ctx = ${((ModbusLocDev)d).ctx}");
          int iRet = ((ModbusLocDev)d).modbusRTUSlaveAdd(((ModbusLocDev)d).ctx, 
                            ((ModbusLocDev)d).address, 0, 0)
          log.message("DDDD ModbusRTU::updateCache ");
          if (iRet != 0) {
            ((ModbusLocDev)d).status := ModbusLocDev.STATUSEINNER
          } else {
            ((ModbusLocDev)d).status := ModbusLocDev.STATUSNOREG
          }
          log.message("DDDD updateCache ");
      }
    }
    
    for (Component f = Sys.app.lookup(children); f != null; f = Sys.app.lookup(f.nextSibling)) {
      log.message("11111 ModbusRTU::updateCache f.name=$f.name and type.name=$f.type.name");
      if (f.type.is(ModbusRemDev.type) || f.type.is(ModbusLocDev.type)) {
        for (Component r = Sys.app.lookup(f.children); r != null; r = Sys.app.lookup(r.nextSibling)) {
          log.message("22222 ModbusRTU::updateCache r.name=$r.name and r.type.name=$r.type.name");
          if (r.type.is(ModbusFieldBusIO.type) && ((ModbusFieldBusIO)r).status < ModbusFieldBusIO.STATUSEURL && ((ModbusFieldBusIO)r).busId == 0) {
            FieldBusDevice dev = null
            log.message("333333 ModbusRTU::updateCache r.name=$r.name and r.type.name=$r.type.name");
            // Find dev for ModbusFieldBusIO
            for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
                if (d.type.is(ModbusRemDev.type) && 
                           (r.type.is(ModbusNetVarIn.type) || r.type.is(ModbusNetVarOut.type))&& 
                           ((ModbusFieldBusIO)r).devStr.equals(((ModbusRemDev)d).deviceName.toStr())) {
                  dev = (ModbusRemDev)d
                  break
                }
                else if (d.type.is(ModbusLocDev.type) &&                 			
                           (r.type.is(ModbusNetVarIn.type) || r.type.is(ModbusNetVarOut.type))&& 
                           ((ModbusFieldBusIO)r).devStr.equals(((ModbusLocDev)d).deviceName.toStr())) {
                  dev = (ModbusLocDev)d
                  break
                }
            }
            log.message("44444 ModbusRTU::updateCache r.name=$r.name and r.type.name=$r.type.name");
            if (dev != null) {
                if (dev.type.is(ModbusRemDev.type)) {
                    if (((ModbusFieldBusIO)r).dataLen == 1) {
                      ((ModbusFieldBusIO)r).cache = ((ModbusRemDev)dev).modbusRTUMasterAdd(
                                ((ModbusRemDev)dev).ctx, 
                                ((ModbusRemDev)dev).address + (((ModbusRemDev)dev).endian << 8), 
                                ((ModbusFieldBusIO)r).regId, 1, 
                                ((ModbusRemDev)dev).refreshTime, 
                                ((ModbusRemDev)dev).pointDelay)
                       log.message("45454545 ModbusRTU::updateCache r.name=$r.name and r.type.name=$r.type.name");
                    } else if (((ModbusFieldBusIO)r).dataLen == 2) {
                        ((ModbusFieldBusIO)r).cache = ((ModbusRemDev)dev).modbusRTUMasterAdd(
                                ((ModbusRemDev)dev).ctx, 
                                ((ModbusRemDev)dev).address + (((ModbusRemDev)dev).endian << 8), 
                                ((ModbusFieldBusIO)r).regId + 1, 1, 
                                ((ModbusRemDev)dev).refreshTime, 
                                ((ModbusRemDev)dev).pointDelay)
                       log.message("4646464 ModbusRTU::updateCache r.name=$r.name and r.type.name=$r.type.name");
                        if (((ModbusFieldBusIO)r).cache != 0) {
                           ((ModbusFieldBusIO)r).cache = ((ModbusRemDev)dev).modbusRTUMasterAdd(
                                ((ModbusRemDev)dev).ctx, 
                                ((ModbusRemDev)dev).address + (((ModbusRemDev)dev).endian << 8), 
                                ((ModbusFieldBusIO)r).regId, 1, 
                                ((ModbusRemDev)dev).refreshTime, 
                                ((ModbusRemDev)dev).pointDelay)
                           log.message("474747 ModbusRTU::updateCache r.name=$r.name and r.type.name=$r.type.name");
                        }
                    }
                    log.message("55555 ModbusRTU::updateCache r.name=$r.name");
                    if (((ModbusFieldBusIO)r).cache != 0) {
                      if (((ModbusFieldBusIO)r).bus == null) {
                        log.message("ModbusRTU::updateCache::SetBus r.name=$r.name");
                        ((ModbusFieldBusIO)r).bus = this
                      }
                      if (((ModbusFieldBusIO)r).device == null) {
                        log.message("updateCache::SetDevice ModbusRemDev r.name=$r.name");
                        ((ModbusFieldBusIO)r).device = dev
                      }
                      log.message("7777 updateCache r.name=$r.name");
                      ((ModbusFieldBusIO)r).status := ModbusFieldBusIO.STATUSREADY
                      dev.status := ModbusRemDev.STATUSREADY
                      result = true
                    } else {
                      ((ModbusFieldBusIO)r).status := ModbusFieldBusIO.STATUSEADDR
                      log.message("9999 ModbusRTU::updateCache r.name=$r.name");
                    }
                }
                else if (dev.type.is(ModbusLocDev.type)) {
                    if (((ModbusFieldBusIO)r).dataLen == 1) {
                      ((ModbusFieldBusIO)r).cache = ((ModbusLocDev)dev).modbusRTUSlaveAdd(
                                ((ModbusLocDev)dev).ctx, 
                                ((ModbusLocDev)dev).address + (((ModbusLocDev)dev).endian << 8), 
                                ((ModbusFieldBusIO)r).regId, 1)
                       log.message("565656 ModbusRTU::updateCache r.name=$r.name");
                    } else if (((ModbusFieldBusIO)r).dataLen == 2) {
                      ((ModbusFieldBusIO)r).cache = ((ModbusLocDev)dev).modbusRTUSlaveAdd(
                                ((ModbusLocDev)dev).ctx, 
                                ((ModbusLocDev)dev).address + (((ModbusLocDev)dev).endian << 8), 
                                ((ModbusFieldBusIO)r).regId + 1, 1)
                      log.message("575757 ModbusRTU::updateCache r.name=$r.name");
                      if (((ModbusFieldBusIO)r).cache != 0) {
                        ((ModbusFieldBusIO)r).cache = ((ModbusLocDev)dev).modbusRTUSlaveAdd(
                                ((ModbusLocDev)dev).ctx, 
                                ((ModbusLocDev)dev).address + (((ModbusLocDev)dev).endian << 8), 
                                ((ModbusFieldBusIO)r).regId, 1)
                        log.message("585858 ModbusRTU::updateCache r.name=$r.name"); 
                      }
                    }
                    log.message("666666 ModbusRTU::updateCache r.name=$r.name");
                    if (((ModbusFieldBusIO)r).cache != 0) {
                      if (((ModbusFieldBusIO)r).bus == null) {
                        log.message("ModbusRTU::updateCache::SetBus r.name=$r.name");
                        ((ModbusFieldBusIO)r).bus = this
                      }
                      if (((ModbusFieldBusIO)r).device == null) {
                        log.message("updateCache::SetDevice ModbusLocDev r.name=$r.name");
                        ((ModbusFieldBusIO)r).device = dev
                      }
                      log.message("8888 updateCache r.name=$r.name");
                      ((ModbusFieldBusIO)r).status := ModbusFieldBusIO.STATUSREADY
                      dev.status := ModbusLocDev.STATUSREADY
                      log.message("242424 ModbusRTU::updateCache dev.status=${dev.status}")
                      result = true
                    } else {
                      ((ModbusFieldBusIO)r).status := ModbusFieldBusIO.STATUSEADDR
                      log.message("AAAAA ModbusRTU::updateCache r.name=$r.name");
                    }
                }
            } else {
              //((ModbusFieldBusIO)r).status := ModbusFieldBusIO.STATUSNODEV
            }
          }
        }
      }
    }

    return result
  }

  override void update()
  {
    bool isDevFound = false
    for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
      if (d.type.is(ModbusRemDev.type) && ((ModbusRemDev)d).status != ModbusRemDev.STATUSEND) {
        isDevFound = true
        break
      }
      else if (d.type.is(ModbusLocDev.type) && ((ModbusLocDev)d).status != ModbusLocDev.STATUSEND) {
        isDevFound = true
        break
      }
    }
    if (isDevFound) {
      status := STATUSNOREG
    } else {
      status := STATUSNODEV
    }
    needFlush = true
  }
  //  override int readReg(int deviceAddr, int addr, int len, float[] buf)
  //  {
  //      if(ctx == -1){
  //          return -1
  //      }
  //      return dR(ctx, deviceAddr, addr, len, buf)
  //  }
  //  
  //  override int writeReg(int deviceAddr, int addr, int len, float[] buf)
  //  {
  //      if(ctx == -1){
  //          return -1
  //      }
  //      if (!((addr > 0 && addr < 10000) || (addr > 40000 && addr < 50000))) {
  //          return -1
  //      }
  //      return dW(ctx, deviceAddr, addr, len, buf)
  //  }
  
  // define Log log
  ////////////////////////////////////////////////////////////////
  // Fields
  ////////////////////////////////////////////////////////////////
  //   private int ctx = -1
  // 
  //   native int dO(int port, int band, int parity, int dataBits, int stopBits, int retryDelay, int rto)
  // 
  //   native int dC(int ctx)
  // 
  //   native int dA(int ctx, int deviceAddr, int addr, int len, int refreshms, int pointDelay)
  // 
  //   native int dR(int ctx, int deviceAddr, int addr, int len, float[] buf)
  // 
  //   native int dW(int ctx, int deviceAddr, int addr, int len, float[] buf)
}
