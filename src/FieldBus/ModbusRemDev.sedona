@niagaraIcon="module://icons/x16/device.png"
class ModbusRemDev
  extends FieldBusDevice
{
  @config
  @asStr
  property Buf(20) ipaddr = "127.0.0.1"
  
  @config
  @min = 1
  @max = 250
  property int address = 1

  @config
  @defaultOnClone
  @unit = Units.millisecond
  @min = 100
  property int refreshTime = 500

  @config
  @unit = Units.millisecond
  property int pointDelay = 5

  define Str ENDIANRANGE = "LittleEndian, BigEndian"
  define int LITTLEENDIAN = 0
  define int BIGENDIAN = 1
  @config
  @range = ENDIANRANGE
  property int endian = 0

  @readonly
  @unit = Units.millisecond
  property int elapsedTime = -1

  @readonly
  property int packetsTotal = -1

  @readonly
  property int packetsError = -1

  ////////////////////////////////////////////////////////////////
  // Life cycle
  ////////////////////////////////////////////////////////////////
  override void loaded()
  {
    sub_fieldbusdevice_type_id = SUB_FIELDBUSDEVICE_TYPE_MODBUSREMDEV
    update()
  }
  override void changed(Slot slot)
  {
    super.changed(slot)
    if (slot == ModbusRemDev.deviceName || slot == ModbusRemDev.address || 
        slot == ModbusRemDev.refreshTime || slot == ModbusRemDev.pointDelay || slot == ModbusRemDev.endian) {
      update()
    }
  }
  override void stop()
  {
    status := STATUSEND
    Component n = Sys.app.lookup(parent)
    if (n.type.is(FieldBusNet.type)) {
      ((FieldBusNet)n).update()
      ((FieldBusNet)n).notifyFlush()
    }
  }

  ////////////////////////////////////////////////////////////////
  // App support
  ////////////////////////////////////////////////////////////////
  void update()
  {
    Component n = Sys.app.lookup(parent)
    if (n != null && n.type.is(FieldBusNet.type)) {
      ((FieldBusNet)n).update()
      ((FieldBusNet)n).notifyFlush()
      for (Component d = Sys.app.lookup(n.children); d != null; d = Sys.app.lookup(d.nextSibling)) {
        if (d == this) {
          continue
        }
        if (d.type.is(ModbusRemDev.type) && ((ModbusRemDev)d).address == address) {
          status := STATUSEADDR
          return
        }
      }
      if (deviceName.toStr().length() > 0) {
        Component s = Sys.app.lookup(n.parent)
        if (s != null && s.type.is(Folder.type) && s.name.equals("service")) {
          for (Component n1 = Sys.app.lookup(s.children); n1 != null; n1 = Sys.app.lookup(n1.nextSibling)) {
            if (n1.type.is(FieldBusNet.type)) {
              for (Component d = Sys.app.lookup(n1.children); d != null; d = Sys.app.lookup(d.nextSibling)) {
                if (d == this) {
                  continue
                }
                if (d.type.is(ModbusRemDev.type) && ((ModbusRemDev)d).deviceName.toStr().equals(deviceName.toStr())) {
                  status := STATUSENAME
                  return
                }
              }
            }
          }
        }
      } else {
        status := STATUSENAME
        return
      }
      status := STATUSNOREG
    } else {
      status := STATUSNONET
    }
  }
  
  override int modbusRTUMasterOpen(int port, int band, int parity, int dataBits, int stopBits, int retryDelay, int rto)
  {
     log.message("ModbusRemDev::modbusRTUMasterOpen port=$port");
     return dRtuO(port, band, parity, dataBits, stopBits, retryDelay, rto)
  }
  override int modbusRTUMasterClose(int ctx)
  {
     log.message("ModbusRemDev::modbusRTUMasterClose ctx=$ctx");
     return dRtuC(ctx)
  }
  override int  modbusRTUMasterAdd(int ctx, int deviceAddr, int addr, int len, int refreshms, int pointDelay)
  {
      if(ctx == -1){
          log.message("ModbusRemDev::modbusRTUMasterAdd failed ctx=$ctx");
          return -1
      }
     log.message("ModbusRemDev::modbusRTUMasterAdd ctx=$ctx and deviceAddr=$deviceAddr and addr=$addr and len=$len");
     return dRtuA(ctx, deviceAddr, addr, len, refreshms, pointDelay)
  }
  override int modbusRTUMasterRead(int ctx, int deviceAddr, int addr, int len, float[] buf)
  {
      if(ctx == -1){
          log.message("ModbusRemDev::modbusRTUMasterRead failed ctx=$ctx");
          return -1
      }
     // log.message("ModbusRemDev::modbusRTUMasterRead ctx=$ctx and deviceAddr=$deviceAddr and addr=$addr and len=$len");
     return dRtuR(ctx, deviceAddr, addr, len, buf)
  }
  override int modbusRTUMasterWrite(int ctx, int deviceAddr, int addr, int len, float[] buf)
  {
      if(ctx == -1){
          log.message("ModbusRemDev::modbusRTUMasterWrite failed ctx=$ctx");
          return -1
      }
      if (!((addr > 0 && addr < 10000) || (addr > 40000 && addr < 50000))) {
          log.message("ModbusRemDev::modbusRTUMasterWrite failed addr=$addr");
          return -1
      }
     // log.message("ModbusRemDev::modbusRTUMasterWrite ctx=$ctx and deviceAddr=$deviceAddr and addr=$addr and len=$len");
     return dRtuW(ctx, deviceAddr, addr, len, buf)
  }
  // TCP
  override int modbusTCPClientOpen(Str ip, int port)
  {
     log.message("ModbusRTULocDev::modbusTCPClientOpen ip=$ip and port=$port");
     return dTcpO(ip, port)
  }
  override int modbusTCPClientClose(int ctx)
  {
     log.message("ModbusRTULocDev::modbusTCPClientClose ctx=$ctx");
     // It will block the whole system 
     return dTcpC(ctx)
  }
  override int  modbusTCPClientAdd(int ctx, int deviceAddr, int addr, int len, int refreshms)
  {
      if(ctx == -1){
          log.message("ModbusRTULocDev::modbusTCPClientAdd failed ctx=$ctx");
          return -1
      }
     log.message("ModbusRTURemDev::modbusTCPClientAdd ctx=$ctx and deviceAddr=$deviceAddr and addr=$addr and len=$len");
     return dTcpA(ctx, deviceAddr, addr, len, refreshms)
  }
  override int modbusTCPClientRead(int ctx, int deviceAddr, int addr, int len, float[] buf)
  {
      if(ctx == -1){
          log.message("ModbusRTULocDev::modbusTCPClientRead failed ctx=$ctx");
          return -1
      }
     ** log.message("ModbusRTULocDev::modbusTCPClientRead ctx=$ctx and deviceAddr=$deviceAddr and addr=$addr and len=$len");
     return dTcpR(ctx, deviceAddr, addr, len, buf)
  }
  override int modbusTCPClientWrite(int ctx, int deviceAddr, int addr, int len, float[] buf)
  {
      if(ctx == -1){
          log.message("ModbusRTULocDev::modbusTCPClientWrite failed ctx=$ctx");
          return -1
      }
      if (!((addr > 0 && addr < 10000) || (addr > 40000 && addr < 50000))) {
          log.message("ModbusRTULocDev::modbusTCPClientWrite failed addr=$addr");
          return -1
      }
     // log.message("ModbusRTULocDev::modbusTCPClientWrite ctx=$ctx and deviceAddr=$deviceAddr and addr=$addr and len=$len");
     return dTcpW(ctx, deviceAddr, addr, len, buf)
  }
  // define Log log
  ////////////////////////////////////////////////////////////////
  // Fields
  ////////////////////////////////////////////////////////////////
  FieldBusNet bus = null
  
  native int dRtuO(int port, int band, int parity, int dataBits, int stopBits, int retryDelay, int rto)
  
  native int dRtuC(int ctx)
  
  native int dRtuA(int ctx, int deviceAddr, int addr, int len, int refreshms, int pointDelay)
  
  native int dRtuR(int ctx, int deviceAddr, int addr, int len, float[] buf)
  
  native int dRtuW(int ctx, int deviceAddr, int addr, int len, float[] buf)

  ////////////////////////////////////////////////////////////////
  native int dTcpO(Str ip, int port)

  native int dTcpC(int ctx)

  native int dTcpA(int ctx, int deviceAddr, int addr, int len, int refreshms)

  native int dTcpR(int ctx, int deviceAddr, int addr, int len, float[] buf)

  native int dTcpW(int ctx, int deviceAddr, int addr, int len, float[] buf)
}
