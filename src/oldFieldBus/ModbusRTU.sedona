class ModbusRTU
  extends FieldBusNet
{
  ////////////////////////////////////////////////////////////////
  // Constants
  ////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////
  // Properties
  ////////////////////////////////////////////////////////////////
  @config
  @min = 0
  @max = 1
  @range = "Port1, Port2"
  @fieldWidth = 10
  property int port = 0

  @config
  @defaultOnClone
  @min = 1200
  @max = 115200
  @fieldWidth=10
  property int band = 19200

  @config
  @defaultOnClone
  @min = 0
  @max = 2
  @range = "None, Even, Odd"
  @fieldWidth = 10
  property int parity = 0

  @config
  @defaultOnClone
  @min=7
  @max=8
  @fieldWidth=10
  property int dataBits = 8

  @config
  @defaultOnClone
  @min=1
  @max=2
  @fieldWidth=10
  property int stopBits = 1

  @config
  @unit = Units.second
  property int retryDelay = 60

  @config
  @unit = Units.millisecond
  property int responseTimeout= 500

  ////////////////////////////////////////////////////////////////
  // Life cycle
  ////////////////////////////////////////////////////////////////
  override void start()
  {
    update()
  }
  override void changed(Slot slot)
  {
    super.changed(slot)
    if (slot == ModbusRTUMaster.port || slot == ModbusRTUMaster.band || 
        slot == ModbusRTUMaster.parity || slot == ModbusRTUMaster.dataBits || 
        slot == ModbusRTUMaster.stopBits || slot == ModbusRTUMaster.retryDelay || 
        slot == ModbusRTUMaster.responseTimeout) {
      update()
    }
  }
  override void stop()
  {
    // if (ctx != -1) {
    //   cleanCache()
    //   dC(ctx)
    //   ctx = -1
    //   busId = 0
    // }
    
    for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
        if (d.type.is(ModbusRTURemDev.type)) {
          if (((ModbusRTURemDev)d).ctx != -1) {
              cleanCache()
              ((ModbusRTURemDev)d).dC(((ModbusRTURemDev)d).ctx)
              ((ModbusRTURemDev)d).ctx = -1
            busId = 0
          } 
        }
        else if (d.type.is(ModbusRTULocDev.type)) {
          if (((ModbusRTULocDev)d).ctx != -1) {
              cleanCache()
              ((ModbusRTULocDev)d).dC(((ModbusRTULocDev)d).ctx)
              ((ModbusRTULocDev)d).ctx = -1
            busId = 0
          } 
        }
    }
  }
  override void execute()
  {
    if (status != STATUSNODEV && needFlush) {
      flush()
      needFlush = false
    }
    // Read Modbus 
    if (status == STATUSOK) {
      for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
        if ((d.type.is(ModbusRTURemDev.type) && ((ModbusRTURemDev)d).status <= ModbusRTURemDev.STATUSREADY)) {
          if (((ModbusRTURemDev)d).modbusRTUMasterRead(((ModbusRTURemDev)d).ctx, ((ModbusRTURemDev)d).address, 0, 1, buffer) == 3) {
            ((ModbusRTURemDev)d).elapsedTime := (int)buffer[0]
            ((ModbusRTURemDev)d).packetsTotal := (int)buffer[1]
            ((ModbusRTURemDev)d).packetsError := (int)buffer[2]
            ((ModbusRTURemDev)d).status := ModbusRTURemDev.STATUSOK
          } else {
            ((ModbusRTURemDev)d).elapsedTime := -1
            ((ModbusRTURemDev)d).packetsTotal := -1
            ((ModbusRTURemDev)d).packetsError := -1
            ((ModbusRTURemDev)d).status := ModbusRTURemDev.STATUSOFFLINE
          }
        }
        else if ((d.type.is(ModbusRTULocDev.type) && ((ModbusRTULocDev)d).status <= ModbusRTULocDev.STATUSREADY)) {
          if (((ModbusRTULocDev)d).modbusRTUSlaveRead(((ModbusRTULocDev)d).ctx, ((ModbusRTULocDev)d).address, 0, 1, buffer) == 1) {
            ((ModbusRTULocDev)d).elapsedTime := (int)buffer[0]
            ((ModbusRTULocDev)d).status := ModbusRTULocDev.STATUSOK
          } else {
            ((ModbusRTULocDev)d).elapsedTime := -1
            ((ModbusRTULocDev)d).status := ModbusRTULocDev.STATUSOFFLINE
          }
        }
      }
      updateVariable()
    }
  }
  
  private void updateVariable()
  {
     ** log.message("updateVariable name=$name")
     // log.message("root:: aliasStr=$aliasStr")
     for (Component f = Sys.app.lookup(this.children); f != null; f = Sys.app.lookup(f.nextSibling)) {
       if (f.type.is(Variable.type) && !f.name.equals("service")) {
         Str nameComponentStr = ((Variable)f).name
         log.message("updateVariable nameComponentStr=$nameComponentStr and name=$name")
         f.execute()
       }
     }
  }
  
  ////////////////////////////////////////////////////////////////
  // App support
  ////////////////////////////////////////////////////////////////
  private void flush()
  {
    // if (ctx != -1) {
    //   cleanCache()
    //   dC(ctx)
    //   ctx = -1
    //   busId = 0
    // }
    for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
        if (d.type.is(ModbusRTURemDev.type)) {
          if (((ModbusRTURemDev)d).ctx != -1) {
              cleanCache()
              ((ModbusRTURemDev)d).dC(((ModbusRTURemDev)d).ctx)
              ((ModbusRTURemDev)d).ctx = -1
            busId = 0
            log.message("11111 flush ((ModbusRTURemDev)d).status=${((ModbusRTURemDev)d).status}")
          } 
        }
        else if (d.type.is(ModbusRTULocDev.type)) {
          if (((ModbusRTULocDev)d).ctx != -1) {
              cleanCache()
              ((ModbusRTULocDev)d).dC(((ModbusRTULocDev)d).ctx)
              ((ModbusRTULocDev)d).ctx = -1
            busId = 0
            log.message("11111 flush ((ModbusRTULocDev)d).status=${((ModbusRTULocDev)d).status}")
          } 
        }
    }
    // ctx = dO(port, band, parity, dataBits, stopBits, retryDelay, responseTimeout)
    // add device node.
    bool bRet = false
    for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
      if (d.type.is(ModbusRTURemDev.type)) {
          ((ModbusRTURemDev)d).bus = this
          ((ModbusRTURemDev)d).ctx = ((ModbusRTURemDev)d).modbusRTUMasterOpen(
                     port, band, parity, dataBits, stopBits, retryDelay, responseTimeout)
            log.message("22222 flush ((ModbusRTURemDev)d).status=${((ModbusRTURemDev)d).status}")
      }
      else if (d.type.is(ModbusRTULocDev.type)) {
          ((ModbusRTULocDev)d).bus = this
          ((ModbusRTULocDev)d).ctx = ((ModbusRTULocDev)d).modbusRTUSlaveOpen(
                     port, band, parity, dataBits, stopBits)
            log.message("22222 flush ((ModbusRTULocDev)d).status=${((ModbusRTULocDev)d).status}")
      }
    }
    
    if (bRet == false) {
      if (updateCache()) {
        // 结束添加标记。
        for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
            if (d.type.is(ModbusRTURemDev.type)) {
                // dA(ctx, 0, 0, 0, 0, 0)
                ((ModbusRTURemDev)d).modbusRTUMasterAdd(
                         ((ModbusRTURemDev)d).ctx, 0, 0, 0, 0, 0)
                log.message("ModbusRTU modbusRTUMasterAdd flush status=$status");
                log.message("33333 flush ((ModbusRTURemDev)d).status=${((ModbusRTURemDev)d).status}")
            }
            else if (d.type.is(ModbusRTULocDev.type)) {
                // dA(ctx, 0, 0, 0, 0, 0)
                ((ModbusRTULocDev)d).modbusRTUSlaveAdd(
                         ((ModbusRTULocDev)d).ctx, 0, 0, 0)
                log.message("ModbusRTU modbusRTUSlaveAdd flush status=$status");
                log.message("3333 updateCache ((ModbusRTULocDev)d).status=${((ModbusRTULocDev)d).status}")
            }
        }
        status := STATUSOK
      } else {
        status := STATUSNOREG
      }
    } else {
      status := STATUSBUSY
    }
  }
  private void cleanCache()
  {
    Component root
    Component p = this
    
    while (Sys.app.lookup(p.parent) != null) {
      p = Sys.app.lookup(p.parent)
    }
    
    root = p
    for (Component f = Sys.app.lookup(root.children); f != null; f = Sys.app.lookup(f.nextSibling)) {
      if (f.type.is(Folder.type) && !f.name.equals("service")) {
        for (Component r = Sys.app.lookup(f.children); r != null; r = Sys.app.lookup(r.nextSibling)) {
          if (r.type.is(FieldBusIO.type)) {
            ((FieldBusIO)r).bus = null
            ((FieldBusIO)r).cache = 0
            ((FieldBusIO)r).busId = 0
            ((FieldBusIO)r).status := FieldBusIO.STATUSNODEV
          }
        }
      }
    }
  }
  private bool updateCache()
  {
    Component root
    Component p = this
    bool result = false

    log.message("AAAAAA updateCache ");
    // add device node.
    for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
      log.message("ABABBAA updateCache ");
      if (d.type.is(ModbusRTURemDev.type) && ((ModbusRTURemDev)d).status < ModbusRTURemDev.STATUSEADDR) {
          // if (dA(ctx, ((ModbusRemDev)d).address, 0, 0, ((ModbusRemDev)d).refreshTime, ((ModbusRemDev)d).pointDelay) != 0) {
          //   ((ModbusRemDev)d).status := ModbusRemDev.STATUSEINNER
          // } else {
          //   ((ModbusRemDev)d).status := ModbusRemDev.STATUSNOREG
          // }
          log.message("CCCC updateCache ctx = ${((ModbusRTURemDev)d).ctx}");
          int iRet = ((ModbusRTURemDev)d).modbusRTUMasterAdd(((ModbusRTURemDev)d).ctx, 
                            ((ModbusRTURemDev)d).address, 0, 0, ((ModbusRTURemDev)d).refreshTime, ((ModbusRTURemDev)d).pointDelay)
          if (iRet != 0) {
            ((ModbusRTURemDev)d).status := ModbusRTURemDev.STATUSEINNER
          } else {
            ((ModbusRTURemDev)d).status := ModbusRTURemDev.STATUSNOREG
          }
      }
      else if (d.type.is(ModbusRTULocDev.type) && ((ModbusRTULocDev)d).status < ModbusRTULocDev.STATUSEADDR) {
          // if (dA(ctx, ((ModbusRemDev)d).address, 0, 0, ((ModbusRemDev)d).refreshTime, ((ModbusRemDev)d).pointDelay) != 0) {
          //   ((ModbusRemDev)d).status := ModbusRemDev.STATUSEINNER
          // } else {
          //   ((ModbusRemDev)d).status := ModbusRemDev.STATUSNOREG
          // }
          log.message("CCCC updateCache ctx = ${((ModbusRTULocDev)d).ctx}");
          int iRet = ((ModbusRTULocDev)d).modbusRTUSlaveAdd(((ModbusRTULocDev)d).ctx, 
                            ((ModbusRTULocDev)d).address, 0, 0)
          log.message("DDDD updateCache ");
          if (iRet != 0) {
            ((ModbusRTULocDev)d).status := ModbusRTULocDev.STATUSEINNER
          } else {
            ((ModbusRTULocDev)d).status := ModbusRTULocDev.STATUSNOREG
          }
          log.message("DDDD updateCache ");
      }
    }

    // add register node in play.
    while (Sys.app.lookup(p.parent) != null) {
      p = Sys.app.lookup(p.parent)
    }

    root = p
    for (Component f = Sys.app.lookup(root.children); f != null; f = Sys.app.lookup(f.nextSibling)) {
      log.message("11111 updateCache f.name=$f.name and type.name=$f.type.name");
      if (f.type.is(Folder.type) && !f.name.equals("service")) {
        for (Component r = Sys.app.lookup(f.children); r != null; r = Sys.app.lookup(r.nextSibling)) {
          log.message("22222 updateCache r.name=$r.name and r.type.name=$r.type.name");
          if (r.type.is(FieldBusIO.type) && ((FieldBusIO)r).status < FieldBusIO.STATUSEURL && ((FieldBusIO)r).busId == 0) {
            FieldBusDevice dev = null
            log.message("333333 updateCache r.name=$r.name and r.type.name=$r.type.name");
            // Find dev for FieldBusIO
            for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
                if (d.type.is(ModbusRTURemDev.type) && 
                           (r.type.is(ModbusNetVarIn.type) || r.type.is(ModbusNetVarOut.type))&& 
                           ((FieldBusIO)r).devStr.equals(((ModbusRTURemDev)d).deviceName.toStr())) {
                  dev = (ModbusRTURemDev)d
                  break
                }
                else if (d.type.is(ModbusRTULocDev.type) &&                 			
                           (r.type.is(ModbusNetVarIn.type) || r.type.is(ModbusNetVarOut.type))&& 
                           ((FieldBusIO)r).devStr.equals(((ModbusRTULocDev)d).deviceName.toStr())) {
                  dev = (ModbusRTULocDev)d
                  break
                }
            }
            log.message("44444 updateCache r.name=$r.name and r.type.name=$r.type.name");
            if (dev != null) {
                if (dev.type.is(ModbusRTURemDev.type)) {
                    if (((FieldBusIO)r).dataLen == 1) {
                      ((FieldBusIO)r).cache = ((ModbusRTURemDev)dev).modbusRTUMasterAdd(
                                ((ModbusRTURemDev)dev).ctx, 
                                ((ModbusRTURemDev)dev).address + (((ModbusRTURemDev)dev).endian << 8), 
                                ((FieldBusIO)r).regId, 1, 
                                ((ModbusRTURemDev)dev).refreshTime, 
                                ((ModbusRTURemDev)dev).pointDelay)
                       log.message("45454545 updateCache r.name=$r.name and r.type.name=$r.type.name");
                    } else if (((FieldBusIO)r).dataLen == 2) {
                        ((FieldBusIO)r).cache = ((ModbusRTURemDev)dev).modbusRTUMasterAdd(
                                ((ModbusRTURemDev)dev).ctx, 
                                ((ModbusRTURemDev)dev).address + (((ModbusRTURemDev)dev).endian << 8), 
                                ((FieldBusIO)r).regId + 1, 1, 
                                ((ModbusRTURemDev)dev).refreshTime, 
                                ((ModbusRTURemDev)dev).pointDelay)
                       log.message("4646464 updateCache r.name=$r.name and r.type.name=$r.type.name");
                        if (((FieldBusIO)r).cache != 0) {
                           ((FieldBusIO)r).cache = ((ModbusRTURemDev)dev).modbusRTUMasterAdd(
                                ((ModbusRTURemDev)dev).ctx, 
                                ((ModbusRTURemDev)dev).address + (((ModbusRTURemDev)dev).endian << 8), 
                                ((FieldBusIO)r).regId, 1, 
                                ((ModbusRTURemDev)dev).refreshTime, 
                                ((ModbusRTURemDev)dev).pointDelay)
                           log.message("474747 updateCache r.name=$r.name and r.type.name=$r.type.name");
                        }
                    }
                    log.message("55555 updateCache r.name=$r.name");
                    if (((FieldBusIO)r).cache != 0) {
                      if (((FieldBusIO)r).bus == null) {
                        log.message("updateCache::SetBus r.name=$r.name");
                        ((FieldBusIO)r).bus = this
                      }
                      if (((FieldBusIO)r).device == null) {
                        log.message("updateCache::SetDevice ModbusRTURemDev r.name=$r.name");
                        ((FieldBusIO)r).device = dev
                      }
                      log.message("7777 updateCache r.name=$r.name");
                      ((FieldBusIO)r).status := FieldBusIO.STATUSREADY
                      dev.status := ModbusRemDev.STATUSREADY
                      result = true
                    } else {
                      ((FieldBusIO)r).status := FieldBusIO.STATUSEADDR
                      log.message("9999 updateCache r.name=$r.name");
                    }
                }
                else if (dev.type.is(ModbusRTULocDev.type)) {
                    if (((FieldBusIO)r).dataLen == 1) {
                      ((FieldBusIO)r).cache = ((ModbusRTULocDev)dev).modbusRTUSlaveAdd(
                                ((ModbusRTULocDev)dev).ctx, 
                                ((ModbusRTULocDev)dev).address + (((ModbusRTULocDev)dev).endian << 8), 
                                ((FieldBusIO)r).regId, 1)
                       log.message("565656 updateCache r.name=$r.name");
                    } else if (((FieldBusIO)r).dataLen == 2) {
                      ((FieldBusIO)r).cache = ((ModbusRTULocDev)dev).modbusRTUSlaveAdd(
                                ((ModbusRTULocDev)dev).ctx, 
                                ((ModbusRTULocDev)dev).address + (((ModbusRTULocDev)dev).endian << 8), 
                                ((FieldBusIO)r).regId + 1, 1)
                      log.message("575757 updateCache r.name=$r.name");
                      if (((FieldBusIO)r).cache != 0) {
                        ((FieldBusIO)r).cache = ((ModbusRTULocDev)dev).modbusRTUSlaveAdd(
                                ((ModbusRTULocDev)dev).ctx, 
                                ((ModbusRTULocDev)dev).address + (((ModbusRTULocDev)dev).endian << 8), 
                                ((FieldBusIO)r).regId, 1)
                        log.message("585858 updateCache r.name=$r.name"); 
                      }
                    }
                    log.message("666666 updateCache r.name=$r.name");
                    if (((FieldBusIO)r).cache != 0) {
                      if (((FieldBusIO)r).bus == null) {
                        log.message("updateCache::SetBus r.name=$r.name");
                        ((FieldBusIO)r).bus = this
                      }
                      if (((FieldBusIO)r).device == null) {
                        log.message("updateCache::SetDevice ModbusRTULocDev r.name=$r.name");
                        ((FieldBusIO)r).device = dev
                      }
                      log.message("8888 updateCache r.name=$r.name");
                      ((FieldBusIO)r).status := FieldBusIO.STATUSREADY
                      dev.status := ModbusRTULocDev.STATUSREADY
                      log.message("242424 updateCache dev.status=${dev.status}")
                      result = true
                    } else {
                      ((FieldBusIO)r).status := FieldBusIO.STATUSEADDR
                      log.message("AAAAA updateCache r.name=$r.name");
                    }
                }
            } else {
              //((FieldBusIO)r).status := FieldBusIO.STATUSNODEV
            }
          }
        }
      }
    }

    return result
  }

  override void update()
  {
    bool isDevFound = false
    for (Component d = Sys.app.lookup(children); d != null; d = Sys.app.lookup(d.nextSibling)) {
      if (d.type.is(ModbusRTURemDev.type) && ((ModbusRTURemDev)d).status != ModbusRTURemDev.STATUSEND) {
        isDevFound = true
        break
      }
      else if (d.type.is(ModbusRTULocDev.type) && ((ModbusRTULocDev)d).status != ModbusRTULocDev.STATUSEND) {
        isDevFound = true
        break
      }
    }
    if (isDevFound) {
      status := STATUSNOREG
    } else {
      status := STATUSNODEV
    }
    needFlush = true
  }
  //  override int readReg(int deviceAddr, int addr, int len, float[] buf)
  //  {
  //      if(ctx == -1){
  //          return -1
  //      }
  //      return dR(ctx, deviceAddr, addr, len, buf)
  //  }
  //  
  //  override int writeReg(int deviceAddr, int addr, int len, float[] buf)
  //  {
  //      if(ctx == -1){
  //          return -1
  //      }
  //      if (!((addr > 0 && addr < 10000) || (addr > 40000 && addr < 50000))) {
  //          return -1
  //      }
  //      return dW(ctx, deviceAddr, addr, len, buf)
  //  }
  
  // define Log log
  ////////////////////////////////////////////////////////////////
  // Fields
  ////////////////////////////////////////////////////////////////
  //   private int ctx = -1
  // 
  //   native int dO(int port, int band, int parity, int dataBits, int stopBits, int retryDelay, int rto)
  // 
  //   native int dC(int ctx)
  // 
  //   native int dA(int ctx, int deviceAddr, int addr, int len, int refreshms, int pointDelay)
  // 
  //   native int dR(int ctx, int deviceAddr, int addr, int len, float[] buf)
  // 
  //   native int dW(int ctx, int deviceAddr, int addr, int len, float[] buf)
}
