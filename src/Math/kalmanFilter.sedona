//
// Copyright (c) 2010-2011 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   07 Jun 2010  Clif Turman  Creation
//   04 Aug 2011  Clif Turman  Add comments
//

**
** 一维卡尔曼滤波器 
**
@niagaraIcon="module://icons/x16/control/math/average.png"
class kalmanFilter
  extends Component
{
    ** the average value updated every execute cycle
    @readonly property float out

    @config
    @min = -1
    @max = 1
    property float kalmanInitLastP     =  (float)0.02       // 上次估算协方差，初始化值为0.02
    
    @config
    @min = -1
    @max = 1
    property float kalmanInitNowP      = (float)0          // 当前估算协方差，初始化值为0
    
    @config
    @min = -1
    @max = 1
    property float kalmanInitQ         =  (float)0.01      // 过程噪声协方差，初始化值为0.01
    
    @config
    @min = -1
    @max = 1
    property float kalmanInitR         =  (float)0.54      // 观测噪声协方差，初始化值为0.54

    property float kalmanKg        =  (float)0              // 卡尔曼增益，初始化值为0

    property float kalmanInitOut    =  (float)0              // 卡尔曼滤波器输出，初始化值为0
    
    

    ** value of in is added to average computation every execute cycle
    property float input      

    ** reset is invoked to re-initialize the averaging
    @readonly property bool reset = false

    **
    ** Callback when component is first started in an app,
    ** before the first call to propagateLinksTo() or execute().
    **
    virtual override void start()
    {
        first = true
    }


  **
  ** Behavior to execute when a property is changed externally
  ** 
  virtual override void changed(Slot slot)
  {
    if(slot == SequenceAvg.reset)
    {
       if(reset)
       {
          first  = true
          reset := false
       }
    }
    super.changed(slot)
  }

  **
  ** Execute is called once every scan.
  **
  virtual override void execute()
  {
    if(first)    {
       LastP     = kalmanInitLastP
       NowP      = kalmanInitNowP
       Q         = kalmanInitQ
       R         = kalmanInitR
       Kg        = kalmanKg
       kalmanout = kalmanInitOut

       out      := kalmanInitOut
       first = false
    }
    else
    {
       log.message("Before kalmanout=${(float)kalmanout} and input = $input") 
       computekalmanFilter(input)
       log.message("After  kalmanout=${(float)kalmanout} ") 
       out := (float)kalmanout
    }
  }

  void computekalmanFilter(float input)
  {
    // 1 - 求先验估计。
    // 2 - 求先验误差。
    // 预测协方差方程：k时刻系统估算协方差 = k-1时刻的系统协方差 + 过程噪声协方差
    NowP = LastP + Q;
    log.message("LastP=${(float)LastP} and Q=${(float)Q}") 
    // 3 - 求卡尔曼增益。
    // 卡尔曼增益方程：卡尔曼增益 = k时刻系统估算协方差 / （k时刻系统估算协方差 + 观测噪声协方差）
    Kg = NowP / (NowP + R);
    log.message("NowP=${(float)NowP} and Kg=${(float)Kg}") 
    // 4 - 求后验估计。
    // 更新最优值方程：k时刻状态变量的最优值 = 状态变量的预测值 + 卡尔曼增益 * （测量值 - 状态变量的预测值）
    kalmanout = kalmanout + Kg * (input - kalmanout);//因为这一次的预测值就是上一次的输出值
    // 5 - 更新误差协方差
    // 协方差方程: 本次的系统协方差付给 kfp->LastP 威下一次运算准备。
    LastP = ((float)1 - Kg) * NowP;
    log.message("LastP=${(float)LastP} ")
    // return kalmanout
  }


  private  float LastP;        // 上次估算协方差，初始化值为0.02
  private  float NowP;         // 当前估算协方差，初始化值为0
  private  float kalmanout;    // 卡尔曼滤波器输出，初始化值为0
  private  float Kg;           // 卡尔曼增益，初始化值为0
  private  float Q;            // 过程噪声协方差，初始化值为0.01
  private  float R;            // 观测噪声协方差，初始化值为0.54

  private bool   first
}
