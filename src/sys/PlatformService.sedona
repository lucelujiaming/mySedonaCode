//
// Copyright (c) 2009 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   5 Mar 09  Brian Frank  Create
//  25 Mar 09  Matthew Giannini make more tool friendly
//

**
** PlatformService is a service designed for a
** specific hardware/OS platform.
**
@niagaraIcon="module://icons/x16/platform.png"
class PlatformService
  extends Service
{
  **
  ** Lookup the platform service for this VM.  Return null
  ** if the application hasn't booted yet or is missing
  ** a platform service.
  **
  static PlatformService lookup()
  {
    return (PlatformService)Sys.app.lookupService(PlatformService.type)
  }

  **
  ** Initialize the platform with the command line arguments.
  ** Return 0 on success.  Return  non-zero on failure, which will
  ** terminate the process.
  **
  virtual int init(Str[] args, int argsLen) { return 0 }

  **
  ** Notify the platform of a name/value pair setting
  ** or state change.
  **
  virtual void notify(Str key, Str val) {}

  **
  ** Convenience to set the platformId property, and call changed()
  **
  void updatePlatformId(Str id)
  {
    platformId.copyFromStr(id)
    changed(PlatformService.platformId)
  }


  **
  ** Convenience to set the platformVer property, and call changed()
  **
  void updatePlatformVer(Str ver)
  {
    platformVer.copyFromStr(ver)
    changed(PlatformService.platformVer)
  }


////////////////////////////////////////////////////////////////
// Service
////////////////////////////////////////////////////////////////

  override virtual void start()
  {
    super.start()
    refreshMemory()
    updatePlatformId( doPlatformId() )
    updatePlatformVer( getPlatVersion() )
  }

  override virtual void execute()
  {
    refreshMemory()
  }


  **
  ** By default, a Platform Service assumes that the platform does not
  ** support hibernation, so this method always returns false.  If your
  ** platform supports hibernation, you should override this method to
  ** return true.
  **
  override virtual bool canHibernate()
  {
    return false
  }


////////////////////////////////////////////////////////////////
// PlatformService
////////////////////////////////////////////////////////////////

  **
  ** Update the memAvailable property to reflect the current
  ** amount of available memory.
  **
  virtual void refreshMemory()
  {
    memAvailable := getNativeMemAvailable()
  }


  **
  ** Return true if App must yield CPU by exiting VM each cycle.
  **
  ** Platforms that support pre-emptive multitasking should return false
  ** since App can sleep to yield CPU.
  **
  ** Cooperative multitasking platforms that expect tasks to run to
  ** completion and return so other tasks can execute should return true.
  **
  ** See also the Apps chapter in Sedona docs
  **
  virtual bool yieldRequired()
  {
    return false
  }

  **
  ** Inform platform that SVM will be exiting with Err.yield and needs
  ** to be scheduled to run again (via resume in vm.c) in ns nanoseconds to meet
  ** the desired App.scanPeriod value.
  **
  ** If the application overruns its scan period, yieldTime will be negative.
  ** In this case the VM should be scheduled to run again as soon as possible.
  **
  ** See also the Apps chapter in Sedona docs
  **
  virtual void yield(long yieldTime)
  {
  }

  **
  ** Returns true if the platform wants to the App to invoke work() again on
  ** all Services during free time before the next App execute needs to begin.
  **
  ** For Apps with long scanPeriods (greater than 50ms), this allows Services 
  ** to respond to network traffic or other asynchronous events multiple times 
  ** during a single scanPeriod - even if the service didn't have any immediate 
  ** work to do.  
  ** 
  ** i.e. - Sox services responds to a poll request, but then has no further
  ** work, nor doing any other services.  A few ms later, another poll request 
  ** comes in.  If this method returns false, no further workd will be done 
  ** until the beginning of the next scan period  If this method returns true, 
  ** work() will be called on all services again and the poll request will
  ** be handled before the next scanPeriod.  
  ** 
  ** nsUntilDeadline represents the time remaining before the next App 
  ** execute() cycle again.  Depending on the underlying OS/system 
  ** architecture, the platform may want to sleep or otherwise relinquish the 
  ** CPU for some fraction of nsUntilDeadline before returning and
  ** allowing App to call service work again.
  ** 
  ** See also the Apps chapter in Sedona docs
  **
  virtual bool workDuringFreeTime(long nsUntilDeadline)
  {
    return false
  }

  ** Network state codes
  ** -1 to -100 reserved for standard Sedona error status
  ** 0 indicates network functional
  ** 1 to 100 reserved for standard Sedona states
  ** Other codes can be defined as needed by platforms

  ** Network interface is initializing
  ** i.e. acquiring DHCP address or joining RF network
  define int netInitializing  = 1

  ** Network interface is operational
  define int netOk            =  0

  ** Network interface has fatal error
  define int netFatal          = -1

  ** Network failed due to configuration error
  define int netConfigError   =   -2


  **
  ** Return the current state of the network interface.  For devices
  ** that support multiple interfaces, return the state of the primary
  ** network interface on the platform.
  **
  virtual int getNetworkState()
  {
    return netOk
  }


////////////////////////////////////////////////////////////////
// Actions
////////////////////////////////////////////////////////////////

  **
  ** Action to restart the Sedona application on the host platform.
  ** This typically means restart just the Sedona process.
  **
  @confirmRequired
  action void restart() { }

  **
  ** Action to reboot the entire host platform.  This typically
  ** means to reboot the entire operating system.
  **
  @confirmRequired
  action void reboot()
  {
    doReboot()
  }

////////////////////////////////////////////////////////////////
// Properties
////////////////////////////////////////////////////////////////

  **
  ** The platform identifier which defines how this
  ** Sedona device should be provisioned.
  **
  @summary=false
  @readonly @asStr property Buf(128) platformId = "unknown"

  **
  ** The platform version.  This should be a Dewey Decimal style
  ** version (x.y.z).  The default value is "0" and should be used
  ** to indicate that the platform does not have a meaningful concept
  ** for platform version.
  **
  @summary=false
  @readonly @asStr property Buf(17) platformVer = "0"

  **
  ** The amount of available runtime memory, in bytes. This property
  ** must be updated during execute()
  **
  @readonly property long memAvailable = 0L

////////////////////////////////////////////////////////////////
// Natives
////////////////////////////////////////////////////////////////

  **
  ** Get the platform identifier which defines how
  ** this Sedona device should be provisioned.
  **
  internal native Str doPlatformId()


  **
  ** Get the platform SVM version.
  **
  internal native Str getPlatVersion()


  **
  ** Returns number of bytes available on the native platform.
  **
  internal native long getNativeMemAvailable()

  internal native void doReboot()
}
